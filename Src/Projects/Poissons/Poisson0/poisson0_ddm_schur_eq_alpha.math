# equation: alpha

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3  = DECLARE_FIELD(name);

# main function:
Ccode["#include "poisson0_headers.h""];
Ccode["#include "maths_equation_solvings_lib.h""];
Ccode["#include "poisson0_equations_lib.h"\n\n"];
Ccode["void *eq_alpha(void *vp1,void *vp2)\n{"];

Ccode["  DDM_SCHUR_EQ_DECLARE"];
Ccode["  Uint ijk;/* node index */"];

# declare for Cpi:
Declare = 
{
  # alpha;
  (obj = field, name = alpha, rank = 0, C_macro3);

  # alpha derivatives
  (obj = field, name = alpha_xx, rank = 0, None);
  (obj = field, name = alpha_yy, rank = 0, None);
  (obj = field, name = alpha_zz, rank = 0, None);
}

# symmetries for Cpi:
# we don't have any symmetry here


Ccode["  double *alpha_xx = Partial_Derivative(alpha,"x,x");"];
Ccode["  double *alpha_yy = Partial_Derivative(alpha,"y,y");"];
Ccode["  double *alpha_zz = Partial_Derivative(alpha,"z,z");"];


##########################################################################
# NOTE: In domain decomposition method, schur_ijk is relabed from point ijk.
# In fact ijk is mapped to point schur_ijk, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################
``
Ccode["  DDM_SCHUR_EQ_OPEN"];
``
	 # write the equation below at each ijk point:
         F_eq = alpha_xx+alpha_yy+alpha_zz-6;
Ccode["  F[schur_ijk] = F_eq;"];# Jx = -F in Newton-Raphson scheme
``
Ccode["  DDM_SCHUR_EQ_CLOSE\n"];
Ccode["  free(alpha_xx);"];
Ccode["  free(alpha_yy);"];
Ccode["  free(alpha_zz);"];
``
Ccode["  return 0;"];
Ccode["}"];

