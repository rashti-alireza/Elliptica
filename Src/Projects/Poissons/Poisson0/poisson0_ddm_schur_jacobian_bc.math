# Jacobian for alpha BC equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = JACOBIAN_DERIVATIVE(name);

# C arguments for jacobian of derivatives
C_arg  = (j_name,ijk,lmn);
C_arg2 = [ijk == lmn];

# main function:
Ccode["#include "poisson0_headers.h""];
Ccode["#include "maths_equation_solvings_lib.h""];
Ccode["#include "poisson0_equations_lib.h"\n\n"];
Ccode["void *jacobian_bc_alpha(void *vp1,void *vp2)\n{"];

Ccode["  DDM_SCHUR_JACOBIAN_BC_DECLARE"];
Ccode["  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */"];
Ccode["  const double kd[2] = {0.,1.};/* Kronecker delta */"];
`  Header_Jacobian`
# declare for Cpi
Declare = 
{
  # alpha;
  #(obj = field, name = alpha, rank = 0, C_macro);
  (obj = field, name = kd, rank = 0, none,C_arg2);
}

# symmetries for Cpi
# no symmetry here

###########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different name for new variables.
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# schur_B[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and
# schur_lmn = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS of a patch, 
# and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# E[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and
# schur_lmn = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS and lmn runs over INTERFACE points.
#
#    PRAGMATICALLY:
#  If you have Dirichlet B.C. for outer-boundary (inner-boundary), 
# only fill B matrix with the jacobian of the B.C. equation, 
# and for E matrix put outerB_Epart = 0 (innerB_Epart = 0).
#  If you have Neumann B.C. or any B.C. that has derivative in it
# fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
###########################################################################

``
# outer boundary like infinity
Ccode["  if (patch->outerB)"];
Ccode["  {"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Bpart_OPEN"];
``
# B matrix:
outerB_Bpart = kd;

Ccode["  schur_B[schur_ijk][schur_lmn] = outerB_Bpart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Bpart_CLOSE\n"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Epart_OPEN"];
``
# E matrix:
outerB_Epart = 0;

Ccode["  E_Trans[schur_lmn][schur_ijk] = outerB_Epart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Epart_CLOSE"];
Ccode["  }/* end of if (patch->outerB) */"];

# inner boundary like horizon
Ccode["  else if (patch->innerB)"];
Ccode["  {"];
Ccode["  DDM_SCHUR_JACOBIAN_BC_Bpart_OPEN"];
``
# B matrix:
innerB_Bpart = kd;

Ccode["  schur_B[schur_ijk][schur_lmn] = innerB_Bpart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Bpart_CLOSE\n"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Epart_OPEN"];
``
# E matrix:
innerB_Epart = 0;

Ccode["  E_Trans[schur_lmn][schur_ijk] = innerB_Epart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_BC_Epart_CLOSE\n"];

Ccode["  }/* end of else if (patch->innerB) */"];

`Footer_Jacobian`
``
Ccode["  return 0;"];
Ccode["}"];

