# alpha Jacobian equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = Init_Jacobian(name);
C_macro4 = Free_Jacobian(name);

# C arguments for jacobian of derivative
C_arg = ;

# main function:
Ccode["#include "poisson0_headers.h""];
Ccode["#include "maths_equation_solvings_lib.h""];
Ccode["#include "poisson0_equations_lib.h"\n\n"];
Ccode["void *jacobian_eq_alpha(void *vp1,void *vp2)\n{"];

Ccode["  DDM_SCHUR_JACOBIAN_EQ_DECLARE"];
Ccode["  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */"];

## init Jacobian
`  Header_Jacobian`
``
# declare for cpi
Declare = 
{
  # jacobian derivative
  (obj = field, name = dfxx_df, rank = 0, C_macro3,C_arg);
  (obj = field, name = dfyy_df, rank = 0, C_macro3,C_arg);
  (obj = field, name = dfzz_df, rank = 0, C_macro3,C_arg);
}

# symmetries for cpi
# no symmetry for here

##########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different names for new variables.
#
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# B[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and
# schur_lmn = map[lmn] and
# ijk takes their values ON INNER POINTS
# of a patch, namley those collocated points that don't reach boundary of
# the patch, and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# E[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and
# schur_lmn = map[lmn] and
# ijk takes their values ON INNER POINTS and lmn runs over INTERFACE points.
#
#    PRAGMATICALLY:
# Fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
##########################################################################


# B matrix:
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN"];
``

`  double dfxx_df = d3f_dx2du_Jacobian(patch,0,ijk,lmn,dfxx_df);`
`  double dfyy_df = d3f_dx2du_Jacobian(patch,3,ijk,lmn,dfyy_df);`
`  double dfzz_df = d3f_dx2du_Jacobian(patch,5,ijk,lmn,dfzz_df);`

Bpart = dfxx_df+dfyy_df+dfzz_df;

Ccode["  B[schur_ijk][schur_lmn] = Bpart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE\n"];

# E matrix:
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN\n"];
``

`  double dfxx_df = d3f_dx2du_Jacobian(patch,0,ijk,lmn,dfxx_df);`
`  double dfyy_df = d3f_dx2du_Jacobian(patch,3,ijk,lmn,dfyy_df);`
`  double dfzz_df = d3f_dx2du_Jacobian(patch,5,ijk,lmn,dfzz_df);`

Epart = dfxx_df+dfyy_df+dfzz_df;

Ccode["  E_Trans[schur_lmn][schur_ijk] = Epart;"];
``
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE"];

Declare = 
{
  # jacobian derivative
  (obj = field, name = dfxx_df, rank = 0, C_macro4,C_arg);
  (obj = field, name = dfyy_df, rank = 0, C_macro4,C_arg);
  (obj = field, name = dfzz_df, rank = 0, C_macro4,C_arg);
}

`  Footer_Jacobian`
``
Ccode["  return 0;"];
Ccode["}"];

