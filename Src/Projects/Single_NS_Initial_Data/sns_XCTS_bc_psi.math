# psi (conformal factor) BC equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = GET_FIELD(name);
C_macro2 = PREP_FIELD(name);
C_macro3 = GET_FIELD_IF_ON_HORIZON(name);

# main function:
`#include "sns_headers.h"`;
`#include "maths_equation_solvings_lib.h"`;
`#include "sns_XCTS_equations_lib.h"\n\n`;
`void *bc_psi(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, map, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_BC_DECLARE`;
`  unsigned ijk;/* node index */`;


# declare for Cpi
Declare = 
{
 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # trKij
 (obj = Field,name = K, rank = 0, C_macro);

 # _A^{ij}
 (obj = Field,name = _A_UiUj, rank = UU, C_macro);

 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro);

 # conformal metric 
 (obj = Field,name = _gamma, rank = DD, C_macro);

 # conformal connections
 (obj = Field,name = _Gamma, rank = UDD, C_macro);

 # normal vector at the horizon
 (obj = Field,name = _HS, rank = U, C_macro3);

 # first derivative of normal vector at the horizon
 (obj = Field,name = _dHS, rank = UD, C_macro3);
}

# symmetries for Cpi
Symm[_A_UiUj(i,j)   = _A_UiUj(j,i)];
Symm[_gamma(i,j)    = _gamma(j,i)];
Symm[_Gamma(i,j,k)  = _Gamma(i,k,j)];

# NOTE: write each equation in terms of ijk point, and if there is no
# outer boundary or inner boundary equation, let it be 0.

# OUTER BOUNDARY LIKE INFINITY #
`  if (patch->outerB)/* at outer boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# bc equation for outer boundary at ijk point:
outerB_F = psi-1;


`  F[map[ijk]] = outerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of if (patch->outerB) */`;

# INNER BOUNDARY LIKE BLACK HOLE HORIZON #
`  else if (patch->innerB)/* at inner boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# bc equation for inner boundary at ijk point:

_DHS(j,-i) = _dHS(j,i) + _Gamma(j,i,l)*_HS(-l);
innerB_F   =  _HS(i)*dpsi(-i)/psi + \
            (KD(i,l)-_HS(i)*_HS(j)*_gamma(-j,l))*_DHS(-l,-i)/4 - K*(psi**2)/6 +\
            (psi**-4)*_A_UiUj(i,j)*_gamma(-i,-l)*_gamma(-j,-m)*_HS(l)*_HS(m)/4;

`  F[map[ijk]] = innerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;

`  }/* end of else if (patch->innerB) */`;


`  return 0;`;
`}`;

