### Calculating free data _gamma,_gammaI and _dgamma analytically.

#########################
### H O W  T O  U S E ###
#########################
# Issue the following (TAKES A VERY VERY LONG TIME):
# 
# $ cpi bbn_free_data_g_gI_dg_analytic.math > bbn_free_data_g_gI_dg_analytic.c && \
#   sed -i '/Welcome to Cpi/,$d' bbn_free_data_g_gI_dg_analytic.c

Dimension = 3;
point = x;

`from __future__ import division`
`from sympy import *`
`from sympy.tensor.tensor import TensorIndexType, TensorHead`
`from sympy.tensor.tensor import tensor_indices`
`from sympy.functions import transpose`
`from sympy.parsing.mathematica import mathematica`
`import sys`
`import re`
`import os`

### ccode generator
`def mcode(m):`
`  print('/* mcode */')`
`  sys.stdout.flush()`
`  m = (m).doit()`
`  code = ""`
`  if (1):`
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%];\n"`
`    math_code += "c=CForm[%];\n"`
`    math_code += "Print[c]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`  else:`
`    code = ccode(m)`
``
## return the code and break long lines
`  code = '{};'.format(code)`
`  code = re.sub(r'\b1.0\*\b','',code)`
`  code = re.sub(r'(.{50,70}[\+\-\*/]+\s?)','\\1{}n'.format("\\"),code)`
``
`  return code`
``
### simplify using mathematica or sympy:
`def msimplify(m,msg,s=0):`
`  print('/* msimplify({}) */'.format(msg))`
`  sys.stdout.flush()`
`  m = (m).doit()`
`  code = ""`
`  if (s):`# if you want mathematica
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%,TimeConstraint->1000];\n"`
`    math_code += "Print[%]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`    return mathematica(code)`
`  else:` ## if you dont wanna simplify
`    code = m`
`    return code`
``
``
`### coords and parameters`
`x,y,z = symbols('x,y,z')`
``
`r0,M_BH,a_BH,Lambda = symbols('r0,M_BH,a_BH,Lambda')`
``
`BH_center_x,BH_center_y,BH_center_z = \`
`  symbols('BH_center_x,BH_center_y,BH_center_z')`
`  `
`chi,chi_U0,chi_U1,chi_U2 = symbols('chi,chi_U0,chi_U1,chi_U2')`
`x_CM,y_CM,Omega_BHNS = symbols('x_CM,y_CM,Omega_BHNS')`
``
`Bx,By,Bz,B2 = symbols('Bx,By,Bz,B2')`
`phiy,phiz   = symbols('phiy,phiz')`
``
`r = (x**2+y**2+z**2)**0.5`
`e = exp(-(r/r0)**4)`
``
`### functions`
`rKS = symbols('rKS',cls=Function)`
`HKS = symbols('HKS',cls=Function)`
`TBR = symbols('TBR',cls=Function)`
`PB  = symbols('TB',cls=Function)`
`PR  = symbols('TR',cls=Function)`
``
``
`### r funciont in Kerr-Schild coords:`
`def rKS(_x,_y,_z,a):`
`  r2 = simplify(_x**2+_y**2+_z**2)`
`  a2 = a**2`
`  return (0.5*(r2-a2+sqrt((r2-a2)**2+4*a2*_z**2)))`
``
``
`### H function in Kerr-Schild coords`
`def HKS (M_BH,_r,a,_z,Lambda):`
`  _k2 = _z/_r;`
`  a2  = a**2`
`  _r2 = _r**2`
`  return (Lambda*M_BH*_r/(_r2+a2*_k2**2))`
``
``
`### boost and rotation transformation, dir = [1,-1]`
`def TBR(B,Ry,Rz,dir,v):`
`  if (dir == 1):`
`    return simplify(B*Rz*Ry)*v`
`  elif (dir == -1):`
`    Bm1 = (B**-1)`
`    return simplify(Ry**-1*Rz**-1) * (Bm1) * v`
`  else:`
`    raise Exception('Bad argument')`
``
`  `
``
`### populate boost transformation:`
`def PB(Bx,By,Bz,B2):`
`   gamma  = (1-B2)**(-0.5)`
`   b = Matrix([`
`     [gamma    , -gamma*Bx            , -gamma*By            , -gamma*Bz],`
`     [-gamma*Bx, 1+(gamma-1)*Bx**2/B2 , (gamma-1)*Bx*By/B2   , (gamma-1)*Bx*Bz/B2],`
`     [-gamma*By, (gamma-1)*Bx*By/B2   , 1+(gamma-1)*By**2/B2 , (gamma-1)*By*Bz/B2],`
`     [-gamma*Bz, (gamma-1)*Bx*Bz/B2   , (gamma-1)*By*Bz/B2   , 1+(gamma-1)*Bz**2/B2]`
`     ])`
`     `
`   b = simplify(b)`
`   return b;`
``
`### populate rotation transformaion`
`def PR(phiy,phiz):`
`  cy = cos(phiy)`
`  sy = sin(phiy)`
`  cz = cos(phiz)`
`  sz = sin(phiz)`
`  `
`  ty = Matrix([`
`     [1,0  ,0,0],`
`     [0,cy ,0,sy],`
`     [0,0  ,1,0],`
`     [0,-sy,0,cy]`
`     ])`
`     `
`  tz = Matrix([`
`     [1,0 ,0  ,0],`
`     [0,cz,-sz,0],`
`     [0,sz,cz ,0],`
`     [0,0 ,0  ,1]`
`     ])`
`     `
`  return ty, tz  `
``
``
`### get ks and H needed to populate Kerr-Schild`
`def get_ks_and_H(x,y,z,a,m,Bx,By,Bz,B2,phiy,phiz):`
`  x_mu     = transpose(Matrix([[0,x,y,z]]))`
`  tB       = PB(Bx,By,Bz,B2)`
`  tRy, tRz = PR(phiy,phiz)`
`  _x_mu = TBR(tB,tRy,tRz,-1,x_mu)`
`  _x    = msimplify(_x_mu[1,0],'_x',1)`
`  _y    = msimplify(_x_mu[2,0],'_y',1)`
`  _z    = msimplify(_x_mu[3,0],'_z',1)`
`  _r    = rKS(_x,_y,_z,a)`
`  a2  = a**2`
`  _r2 = _r**2`
`  _k0 = msimplify((_r*_x+a*_y)/(_r2+a2),'_k0')`
`  _k1 = msimplify((_r*_y-a*_x)/(_r2+a2),'_k1')`
`  _k2 = msimplify(_z/_r,'_k2')`
`  _kt = 1`
`  `
`  _k_mu = transpose(Matrix([[_kt,_k0,_k1,_k2]]))`
`  k_mu  = TBR(tB,tRy,tRz,1,_k_mu)`
`  `
`  print("/* kt */")`
`  sys.stdout.flush()`
`  kt = msimplify(k_mu[0,0],'kt')`
`  `
`  print("/* k0 */")`
`  sys.stdout.flush()`
`  k0 = msimplify(k_mu[1,0],'k0')`
`  `
`  print("/* k1 */")`
`  sys.stdout.flush()`
`  k1 = msimplify(k_mu[2,0],'k1')`
`  `
`  print("/* k2 */")`
`  sys.stdout.flush()`
`  k2 = msimplify(k_mu[3,0],'k2')`
`  `
`  print("/* H */")`
`  sys.stdout.flush()`
`  H = msimplify(HKS(m,_r,a,_z,Lambda),'H')`
`  `
`  return kt,k0,k1,k2,H`
``
`### evaluates:`
`kt,k0,k1,k2,H = get_ks_and_H(x,y,z,a_BH,M_BH,Bx,By,Bz,B2,phiy,phiz)`
`r = (x**2+y**2+z**2)**0.5`
`e = exp(-(r/r0)**4)`
`C = 2*H*e`
`print("/* A */")`
`sys.stdout.flush()`
`A = msimplify(1/(1+C*(k0**2+k1**2+k2**2)),'A')`
``
`print(k0)`
`exit(0)`
`_g00 = 1.+C*k0*k0`
`_g01 = C*k0*k1`
`_g02 = C*k0*k2`
`_g11 = 1+C*k1*k1`
`_g12 = C*k1*k2`
`_g22 = 1+C*k2*k2`
`_ig00 = A*(1+C*((k1)**2+(k2)**2))`
`_ig01 = -A*C*k0*k1`
`_ig02 = -A*C*k0*k2`
`_ig11 = A*(1+C*((k0)**2+(k2)**2))`
`_ig12 = -A*C*k1*k2`
`_ig22 = A*(1+C*((k0)**2+(k1)**2))`

``
`_g = Matrix([`
`      [_g00,_g01,_g02],`
`      [_g01,_g11,_g12],`
`      [_g02,_g12,_g22]`
`      ])`
`_ig = Matrix([`
`      [_ig00,_ig01,_ig02],`
`      [_ig01,_ig11,_ig12],`
`      [_ig02,_ig12,_ig22]`
`      ])`

### first order derivatives:
`dg00_D0=(diff(_g00,x))`
`dg00_D2=(diff(_g00,z))`
`dg00_D1=(diff(_g00,y))`
`dg01_D1=(diff(_g01,y))`
`dg01_D2=(diff(_g01,z))`
`dg01_D0=(diff(_g01,x))`
`dg02_D0=(diff(_g02,x))`
`dg02_D2=(diff(_g02,z))`
`dg02_D1=(diff(_g02,y))`
`dg11_D0=(diff(_g11,x))`
`dg11_D2=(diff(_g11,z))`
`dg11_D1=(diff(_g11,y))`
`dg12_D2=(diff(_g12,z))`
`dg12_D1=(diff(_g12,y))`
`dg12_D0=(diff(_g12,x))`
`dg22_D1=(diff(_g22,y))`
`dg22_D0=(diff(_g22,x))`
`dg22_D2=(diff(_g22,z))`
``
`########################`
`### C code generator ###`
`########################`
``
``
`print('#include "bbn_headers.h"')`
`print('void bbn_free_data_g_gI_analytic(')`
`print(' Patch_T *const patch,')`
`print(' double *(*get_v)(const char *const fname,void *params),')`
`print(' void *params);')`
`print('void bbn_free_data_g_gI_analytic(')`
`print(' Patch_T *const patch,')`
`print(' double *(*get_v)(const char *const fname,void *params),')`
`print(' void *params);')`
`print('{')`
`print('  const double r0          = Pgetd("BH_KerrSchild_RollOff");')`
`print('  const double BH_center_x = Pgetd("BH_center_x");')`
`print('  const double BH_center_y = Pgetd("BH_center_y");')`
`print('  const double BH_center_z = Pgetd("BH_center_z");')`
`print('  const double M_BH        = Pgetd("BH_irreducible_mass");')`
`print('  const double a_BH        = Pgetd("BH_net_spin");')`
`print('  const double chi_U0   = Pgetd("BH_chi_U0");')`
`print('  const double chi_U1   = Pgetd("BH_chi_U1");')`
`print('  const double chi_U2   = Pgetd("BH_chi_U2");')`
`print('  const double y_CM = Pgetd("y_CM");')`
`print('  const double x_CM = Pgetd("x_CM")')`
`print('  const double Omega_BHNS = Pgetd("BH_NS_angular_velocity");')`
`print('  const double chi = sqrt(Pow2(chi_U0)+Pow2(chi_U1)+Pow2(chi_U2));')`
`print('  const unsigned nn = patch->nn;')`
`print('  double phiy = 0,phiz = 0;')`
`print('  double Bx,By,Bz,B2;/* B = v/c */')`
`print('  unsigned ijk;')`
`print('')`
`print('  assert(LSSEQL(chi,1));')`
`print('')`
`print('  /* boost */')`
`print('  Bx = -Omega_BHNS*(BH_center_y-y_CM);')`
`print('  By =  Omega_BHNS*(BH_center_x-x_CM);')`
`print('  Bz = Pgetd("BH_Vz");')`
`print('  B2 = Pow2(Bx)+Pow2(By)+Pow2(Bz);')`
`print('')`
`print('  /* rotation */')`
`print('  if (!EQL(chi,0))/* otherwise tR is 0 */')`
`print('  {')`
`print('    phiz = -arctan(chi_U1,chi_U0);')`
`print('    phiy = -acos(chi_U2/chi);')`
`print('    assert(isfinite(phiy));')`
`print('  }')`
``
`print('    double *const _gamma_D2D2 = get_v("_gamma_D2D2",params)')`
`print('    double *const _gamma_D0D2 = get_v("_gamma_D0D2",params)')`
`print('    double *const _gamma_D0D0 = get_v("_gamma_D0D0",params)')`
`print('    double *const _gamma_D0D1 = get_v("_gamma_D0D1",params)')`
`print('    double *const _gamma_D1D2 = get_v("_gamma_D1D2",params)')`
`print('    double *const _gamma_D1D1 = get_v("_gamma_D1D1",params)')`
`print('    double *const _gammaI_U0U2 = get_v("_gammaI_U0U2",params)')`
`print('    double *const _gammaI_U0U0 = get_v("_gammaI_U0U0",params)')`
`print('    double *const _gammaI_U0U1 = get_v("_gammaI_U0U1",params)')`
`print('    double *const _gammaI_U1U2 = get_v("_gammaI_U1U2",params)')`
`print('    double *const _gammaI_U1U1 = get_v("_gammaI_U1U1",params)')`
`print('    double *const _gammaI_U2U2 = get_v("_gammaI_U2U2",params)')`
`print('    ')`
`print('    for (ijk = 0; ijk < nn; ++ijk)')`
`print('    {')`
`print('      double x,y,z,r,H,k0,k1,k2,kt;')`
`print('      x = patch->node[ijk]->x[0]-BH_center_x;')`
`print('      y = patch->node[ijk]->x[1]-BH_center_y;')`
`print('      z = patch->node[ijk]->x[2]-BH_center_z;')`
`print('      r = sqrt(Pow2(x)+Pow2(y)+Pow2(z));')`
`print('      _gamma_D0D0[ijk] =')`
`print(mcode(_g[0,0]))`
``
`print('      _gamma_D0D1[ijk] =') `
`print(mcode(_g[0,1]))`
``
`print('      _gamma_D0D2[ijk] =')`
`print(mcode(_g[0,2]))`
``
`print('      _gamma_D1D1[ijk] =')`
`print(mcode(_g[1,1]))`
``
`print('      _gamma_D1D2[ijk] =')`
`print(mcode(_g[1,2]))`
``
`print('      _gamma_D2D2[ijk] =')`
`print(mcode(_g[2,2]))`
``
`print('      _gammaI_U0U0[ijk] =')`
`print(mcode(_ig[0,0]))`
``
`print('      _gammaI_U0U1[ijk] =')`
`print(mcode(_ig[0,1]))`
``
`print('      _gammaI_U0U2[ijk] =')`
`print(mcode(_ig[0,2]))`
``
`print('      _gammaI_U1U1[ijk] =')`
`print(mcode(_ig[1,1]))`
``
`print('      _gammaI_U1U2[ijk] =')`
`print(mcode(_ig[1,2]))`
``
`print('      _gammaI_U2U2[ijk] =')`
`print(mcode(_ig[2,2]))`
``
`print('      /* quick test check _gamma * _gammaI = delta */')`
`print('      if (0)')`
`print('      {')`
`print('          double delta_U0D0 = ')`
`print('        _gammaI_U0U0[ijk]*_gamma_D0D0[ijk] + _gammaI_U0U1[ijk]*')`
`print('        _gamma_D0D1[ijk] + _gammaI_U0U2[ijk]*_gamma_D0D2[ijk];')`
`print('          double delta_U0D1 = ')`
`print('        _gammaI_U0U0[ijk]*_gamma_D0D1[ijk] + _gammaI_U0U1[ijk]*')`
`print('        _gamma_D1D1[ijk] + _gammaI_U0U2[ijk]*_gamma_D1D2[ijk];')`
`print('          double delta_U0D2 = ')`
`print('        _gammaI_U0U0[ijk]*_gamma_D0D2[ijk] + _gammaI_U0U1[ijk]*')`
`print('        _gamma_D1D2[ijk] + _gammaI_U0U2[ijk]*_gamma_D2D2[ijk];')`
`print('          double delta_U1D2 = ')`
`print('        _gammaI_U0U1[ijk]*_gamma_D0D2[ijk] + _gammaI_U1U1[ijk]*')`
`print('        _gamma_D1D2[ijk] + _gammaI_U1U2[ijk]*_gamma_D2D2[ijk];')`
`print('          double delta_U1D0 = ')`
`print('        _gammaI_U0U1[ijk]*_gamma_D0D0[ijk] + _gammaI_U1U1[ijk]*')`
`print('        _gamma_D0D1[ijk] + _gammaI_U1U2[ijk]*_gamma_D0D2[ijk];')`
`print('         double delta_U1D1 = ')`
`print('        _gammaI_U0U1[ijk]*_gamma_D0D1[ijk] + _gammaI_U1U1[ijk]*')`
`print('        _gamma_D1D1[ijk] + _gammaI_U1U2[ijk]*_gamma_D1D2[ijk];')`
`print('        ')`
`print('          double delta_U2D2 = ')`
`print('        _gammaI_U0U2[ijk]*_gamma_D0D2[ijk] + _gammaI_U1U2[ijk]*')`
`print('        _gamma_D1D2[ijk] + _gammaI_U2U2[ijk]*_gamma_D2D2[ijk];')`
`print('          double delta_U2D0 = ')`
`print('        _gammaI_U0U2[ijk]*_gamma_D0D0[ijk] + _gammaI_U1U2[ijk]*')`
`print('        _gamma_D0D1[ijk] + _gammaI_U2U2[ijk]*_gamma_D0D2[ijk];')`
`print('          double delta_U2D1 = ')`
`print('        _gammaI_U0U2[ijk]*_gamma_D0D1[ijk] + _gammaI_U1U2[ijk]*')`
`print('        _gamma_D1D1[ijk] + _gammaI_U2U2[ijk]*_gamma_D1D2[ijk];')`
`print('        if(!EQL(delta_U1D1,1)||!isfinite(delta_U1D1))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U0D1,0)||!isfinite(delta_U0D1))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U0D2,0)||!isfinite(delta_U0D2))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U1D2,0)||!isfinite(delta_U1D2))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U0D0,1)||!isfinite(delta_U0D0))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U2D1,0)||!isfinite(delta_U2D1))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U2D2,1)||!isfinite(delta_U2D2))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U2D0,0)||!isfinite(delta_U2D0))  Error0("_gammaI is not correct!\n");')`
`print('        if(!EQL(delta_U1D0,0)||!isfinite(delta_U1D0))  Error0("_gammaI is not correct!\n");')`
`print('      }')`
`print('    }')`
`print('}')`
``
`print('void bbn_free_data_dg_analytic(')`
`print('	Patch_T *const patch, ')`
`print('	double *(*get_v)(const char *const fname,void *params),')`
`print('	void *params);')`
`print('void bbn_free_data_dg_analytic(')`
`print('	Patch_T *const patch, ')`
`print('	double *(*get_v)(const char *const fname,void *params),')`
`print('	void *params)')`
`print('{')`
`print('  const double r0          = Pgetd("BH_KerrSchild_RollOff");')`
`print('  const double BH_center_x = Pgetd("BH_center_x");')`
`print('  const double BH_center_y = Pgetd("BH_center_y");')`
`print('  const double BH_center_z = Pgetd("BH_center_z");')`
`print('  const double M_BH        = Pgetd("BH_irreducible_mass");')`
`print('  const double a_BH        = Pgetd("BH_net_spin");')`
`print('  const double chi_U0   = Pgetd("BH_chi_U0");')`
`print('  const double chi_U1   = Pgetd("BH_chi_U1");')`
`print('  const double chi_U2   = Pgetd("BH_chi_U2");')`
`print('  const double y_CM = Pgetd("y_CM");')`
`print('  const double x_CM = Pgetd("x_CM")')`
`print('  const double Omega_BHNS = Pgetd("BH_NS_angular_velocity");')`
`print('  const double chi = sqrt(Pow2(chi_U0)+Pow2(chi_U1)+Pow2(chi_U2));')`
`print('  const unsigned nn = patch->nn;')`
`print('  double phiy = 0,phiz = 0;')`
`print('  double Bx,By,Bz,B2;/* B = v/c */')`
`print('  unsigned ijk;')`
`print('')`
`print('  assert(LSSEQL(chi,1));')`
`print('')`
`print('  /* boost */')`
`print('  Bx = -Omega_BHNS*(BH_center_y-y_CM);')`
`print('  By =  Omega_BHNS*(BH_center_x-x_CM);')`
`print('  Bz = Pgetd("BH_Vz");')`
`print('  B2 = Pow2(Bx)+Pow2(By)+Pow2(Bz);')`
`print('')`
`print('  /* rotation */')`
`print('  if (!EQL(chi,0))/* otherwise tR is 0 */')`
`print('  {')`
`print('    phiz = -arctan(chi_U1,chi_U0);')`
`print('    phiy = -acos(chi_U2/chi);')`
`print('    assert(isfinite(phiy));')`
`print('  }')`
`print('  ')`
`print('double *const   dgamma_D1D2D2 = get_v("dgamma_D1D2D2",params);')`
`print('double *const   dgamma_D0D0D1 = get_v("dgamma_D0D0D1",params);')`
`print('double *const   dgamma_D0D2D1 = get_v("dgamma_D0D2D1",params);')`
`print('double *const   dgamma_D0D1D0 = get_v("dgamma_D0D1D0",params);')`
`print('double *const   dgamma_D1D2D1 = get_v("dgamma_D1D2D1",params);')`
`print('double *const   dgamma_D2D2D0 = get_v("dgamma_D2D2D0",params);')`
`print('double *const   dgamma_D0D0D0 = get_v("dgamma_D0D0D0",params);')`
`print('double *const   dgamma_D0D0D2 = get_v("dgamma_D0D0D2",params);')`
`print('double *const   dgamma_D0D2D2 = get_v("dgamma_D0D2D2",params);')`
`print('double *const   dgamma_D2D2D1 = get_v("dgamma_D2D2D1",params);')`
`print('double *const   dgamma_D0D1D1 = get_v("dgamma_D0D1D1",params);')`
`print('double *const   dgamma_D0D2D0 = get_v("dgamma_D0D2D0",params);')`
`print('double *const   dgamma_D1D2D0 = get_v("dgamma_D1D2D0",params);')`
`print('double *const   dgamma_D1D1D1 = get_v("dgamma_D1D1D1",params);')`
`print('double *const   dgamma_D0D1D2 = get_v("dgamma_D0D1D2",params);')`
`print('double *const   dgamma_D1D1D0 = get_v("dgamma_D1D1D0",params);')`
`print('double *const   dgamma_D1D1D2 = get_v("dgamma_D1D1D2",params);')`
`print('double *const   dgamma_D2D2D2 = get_v("dgamma_D2D2D2",params);')`
`print('')`
`print('  for (ijk = 0; ijk < nn; ++ijk) ')`
`print('  {')`
`print('    double x,y,z;')`
`print('    x = patch->node[ijk]->x[0]-BH_center_x;')`
`print('    y = patch->node[ijk]->x[1]-BH_center_y;')`
`print('    z = patch->node[ijk]->x[2]-BH_center_z;')`
`print('')`
`print('    _dgamma_D1D2D2[ijk]=')`
`print(mcode(dg12_D2))`
`print('')`
`print('    _dgamma_D0D0D1[ijk]=')`
`print(mcode(dg00_D1))`
`print('')`
`print('    _dgamma_D0D2D1[ijk]=')`
`print(mcode(dg02_D1))`
`print('')`
`print('    _dgamma_D0D1D0[ijk]=')`
`print(mcode(dg01_D0))`
`print('')`
`print('    _dgamma_D1D2D1[ijk]=')`
`print(mcode(dg12_D1))`
`print('')`
`print('    _dgamma_D2D2D0[ijk]=')`
`print(mcode(dg22_D0))`
`print('')`
`print('    _dgamma_D0D0D0[ijk]=')`
`print(mcode(dg00_D0))`
`print('')`
`print('    _dgamma_D0D0D2[ijk]=')`
`print(mcode(dg00_D2))`
`print('')`
`print('    _dgamma_D0D2D2[ijk]=')`
`print(mcode(dg02_D2))`
`print('')`
`print('    _dgamma_D2D2D1[ijk]=')`
`print(mcode(dg22_D1))`
`print('')`
`print('    _dgamma_D0D1D1[ijk]=')`
`print(mcode(dg01_D1))`
`print('')`
`print('    _dgamma_D0D2D0[ijk]=')`
`print(mcode(dg02_D0))`
`print('')`
`print('    _dgamma_D1D2D0[ijk]=')`
`print(mcode(dg12_D0))`
`print('')`
`print('    _dgamma_D1D1D1[ijk]=')`
`print(mcode(dg11_D1))`
`print('')`
`print('    _dgamma_D0D1D2[ijk]=')`
`print(mcode(dg01_D2))`
`print('')`
`print('    _dgamma_D1D1D0[ijk]=')`
`print(mcode(dg11_D0))`
`print('')`
`print('    _dgamma_D1D1D2[ijk]=')`
`print(mcode(dg11_D2))`
`print('')`
`print('    _dgamma_D2D2D2[ijk]=')`
`print(mcode(dg22_D2))`
`print('')`
`print('  }')`
`print('}')`
``
``
### run python
### remove C comments:
Command["sed -i '1,5d'"];
### run python
Comand["python "];

### rm redundants
Comand["rm "];
