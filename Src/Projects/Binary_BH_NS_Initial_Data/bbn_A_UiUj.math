# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = GET_FIELD(name);
C_macro2 = PREP_FIELD(name);
C_macro3 = DECLARE_AND_EMPTY_FIELD(name);

# main function:
Ccode["#include "bbn_headers.h"\n\n"];
Ccode["void bbn_update_psi10A_UiUj(Patch_T *const patch)\n{"];

Declare = 
{
 # _A^{ij}
 (obj = Field,name = _A_UiUj, rank = UU, C_macro2);

 # partial derivative of _A^{ij}
 #(obj = Field,name = _dA_UiUj, rank = UUD, C_macro3);

 # _A^{ij}*_A_{ij}
 (obj = Field,name = _Aij2, rank = 0, C_macro2);

 # shift
 (obj = Field,name = Beta, rank = U, C_macro);

 # d(shift)/d?
 (obj = Field,name = dBeta, rank = UD, C_macro);

 # psi
 (obj = Field,name = psi, rank = 0, C_macro);

 # eta
 (obj = Field,name = eta, rank = 0, C_macro);

 # conformal metric 
 (obj = Field,name = _gamma, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = _gammaI, rank = UU, C_macro);

 # Christoffer symbol value
 (obj = Field,name = _Gamma, rank = UDD, C_macro);
}

# symmetries:
Symm[_A_UiUj(i,j)      = _A_UiUj(j,i)];
#Symm[_dA_UiUj(i,j,l)   = _dA_UiUj(j,i,l)];
Symm[_gamma(i,j)    = _gamma(j,i)];
Symm[_gammaI(i,j)   = _gammaI(j,i)];
Symm[_Gamma(i,j,k)  = _Gamma(i,k,j)];

Ccode["    unsigned nn = patch->nn;"];
Ccode["    unsigned ijk;"];
Ccode["    for(ijk = 0; ijk < nn; ++ijk)"];
Ccode["    {"];

# _A^{ij} calculation (NOTE _u^{ij} ASSUEMD 0) :
  alphabar     = eta*psi**(-7);# alpha * psi^-6
  _DB_UU(i,j)  = _gammaI(i,-l)*(dBeta(j,l)+_Gamma(j,l,m)*Beta(-m));# _D^i(B^j)
  _LV_UU(i,j)  = _DB_UU(i,j)+_DB_UU(j,i)-2/3*_gammaI(i,j)*_gamma(-l,-m)*_DB_UU(l,m);
  Symm[_LV_UU(i,j)   = _LV_UU(j,i)];
  _A_UUij(i,j) = _LV_UU(i,j)/(2*alphabar);
  Symm[_A_UUij(i,j)   = _A_UUij(j,i)];
  _AijAij      = _A_UUij(i,j)*_A_UUij(l,m)*_gamma(-i,-l)*_gamma(-j,-m);
  
  Cpopulate[_A_UiUj   = _A_UUij];
  Ccode["    _Aij2[ijk] = _AijAij;"];

Ccode["    }/*end of for(ijk = 0; ijk < nn; ++ijk)*/"];

#`  Field_T *f_A_UiUj_U2U2 = patch->pool[Ind("_A_UiUj_U2U2")];`;
#`  Field_T *f_A_UiUj_U1U2 = patch->pool[Ind("_A_UiUj_U1U2")];`;
#`  Field_T *f_A_UiUj_U1U1 = patch->pool[Ind("_A_UiUj_U1U1")];`;
#`  Field_T *f_A_UiUj_U0U2 = patch->pool[Ind("_A_UiUj_U0U2")];`;
#`  Field_T *f_A_UiUj_U0U1 = patch->pool[Ind("_A_UiUj_U0U1")];`;
#`  Field_T *f_A_UiUj_U0U0 = patch->pool[Ind("_A_UiUj_U0U0")];`;  

#`  _dA_UiUj_U2U2D2->v = Partial_Derivative(f_A_UiUj_U2U2,"z");`;
#`  _dA_UiUj_U2U2D0->v = Partial_Derivative(f_A_UiUj_U2U2,"x");`;
#`  _dA_UiUj_U2U2D1->v = Partial_Derivative(f_A_UiUj_U2U2,"y");`;
#`  _dA_UiUj_U1U1D2->v = Partial_Derivative(f_A_UiUj_U1U1,"z");`;
#`  _dA_UiUj_U1U1D0->v = Partial_Derivative(f_A_UiUj_U1U1,"x");`;
#`  _dA_UiUj_U1U1D1->v = Partial_Derivative(f_A_UiUj_U1U1,"y");`;
#`  _dA_UiUj_U0U0D2->v = Partial_Derivative(f_A_UiUj_U0U0,"z");`;
#`  _dA_UiUj_U0U0D0->v = Partial_Derivative(f_A_UiUj_U0U0,"x");`;
#`  _dA_UiUj_U0U0D1->v = Partial_Derivative(f_A_UiUj_U0U0,"y");`;
#`  _dA_UiUj_U0U1D2->v = Partial_Derivative(f_A_UiUj_U0U1,"z");`;
#`  _dA_UiUj_U0U1D1->v = Partial_Derivative(f_A_UiUj_U0U1,"y");`;
#`  _dA_UiUj_U0U1D0->v = Partial_Derivative(f_A_UiUj_U0U1,"x");`;
#`  _dA_UiUj_U1U2D1->v = Partial_Derivative(f_A_UiUj_U1U2,"y");`;
#`  _dA_UiUj_U1U2D0->v = Partial_Derivative(f_A_UiUj_U1U2,"x");`;
#`  _dA_UiUj_U1U2D2->v = Partial_Derivative(f_A_UiUj_U1U2,"z");`;
#`  _dA_UiUj_U0U2D0->v = Partial_Derivative(f_A_UiUj_U0U2,"x");`;
#`  _dA_UiUj_U0U2D1->v = Partial_Derivative(f_A_UiUj_U0U2,"y");`;
#`  _dA_UiUj_U0U2D2->v = Partial_Derivative(f_A_UiUj_U0U2,"z");`;


Ccode["}"]; # end of bbn_update_psi10A_UiUj function
