# Jacobian for ? equation.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = GET_FIELD(name);
C_macro2 = PREP_FIELD(name);
C_macro3 = JACOBIAN_DERIVATIVE(name);

# C arguments for jacobian of derivative
C_arg = (j_name,ijk,lmn);

# main function:
Ccode["#include "bbn_headers.h""];
Ccode["#include "bbn_XCTS_equations_lib.h""];
Ccode["#include "maths_equation_solvings_lib.h"\n\n"];
Ccode["void *jacobian_eq_?(void *vp1,void *vp2)\n{"];

# NOTE: THE FOLLOWING MACRO DECLARES OR DEFINES THE FOLLOWING VARIABLES:
# patch, S, B, E_Trans, node, Ni, Nj, K0, Nk, Ref, i,j,k
# THUS, DO NOT DEFINE THEM AGAIN.
Ccode["  DDM_SCHUR_JACOBIAN_EQ_DECLARE"];
Ccode["  unsigned ijk,lmn;\* for Jacobian entries J[ijk][lmn] *\"]

# declare for cpi
Declare = 
{
}

# symmetries for cpi

##########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different names for new variables.
#
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# B[i][j] = d[F(f(ijk))]/df(lmn), ijk takes their values on inner points
# of a patch, namley those collocated points that don't reach boundary of
# the patch, and lmn runs over all point of the patch.
# E[i][j] = d[F(f(ijk))]/df(lmn), ijk takes their values on interface
# points, namely those collocated points on the boundary of the patch,
# lmn runs over all point of the patch.
#
#    PRAGMATICALLY:
# Fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#    NOTE3: For each part which doesn't exist, let it be 0.
##########################################################################


Ccode["  DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN"];

         # B matrix:
         Bpart = 0;

Ccode["  B[i][j] = Bpart;"];
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE\n"];

Ccode["  DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN"];

         # E matrix:
         Epart = 0;

Ccode["  E_Trans[j][i] = Epart;"];
Ccode["  DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE"];

Ccode["  return 0;"];
Ccode["}"];

