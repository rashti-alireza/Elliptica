# psi (conformal factor) Jacobian equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = JACOBIAN_DERIVATIVE(name);

# C arguments for jacobian of derivative
C_arg = (j_name,ijk,lmn);
C_arg2 = [ijk == lmn]; # for kd

# main function:
`#include "bbn_headers.h"`;
`#include "maths_equation_solvings_lib.h"`;

`void *bbn_bhf_jacobian_eq_Brown(void *vp1,void *vp2);`;
`void *bbn_bhf_jacobian_eq_Brown(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES OR DEFINES THE FOLLOWING VARIABLES:
# patch, S, B, E_Trans, node, Ni, Nj, K0, Nk, i,j,k
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_JACOBIAN_EQ_DECLARE`;
`  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */`;

# declare for cpi
Declare = 
{
  # jacobian derivative
  (obj = field, name = dfxx_df, rank = 0, C_macro3,C_arg);
  (obj = field, name = dfyy_df, rank = 0, C_macro3,C_arg);
  (obj = field, name = dfzz_df, rank = 0, C_macro3,C_arg);
}

##########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different names for new variables.
#
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# B[i][j] = d[F(f(ijk))]/df(lmn), where i = map[ijk], and j = map[lmn] and
# ijk takes their values ON INNER POINTS
# of a patch, namley those collocated points that don't reach boundary of
# the patch, and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# E[i][j] = d[F(f(ijk))]/df(lmn), where i = map[ijk], and j = map[lmn] and
# ijk takes their values ON INNER POINTS and lmn runs over INTERFACE points.
#
#    PRAGMATICALLY:
# Fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
##########################################################################


###############################################
####### B matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################
`  DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN\n`;
Bpart = dfxx_df+dfyy_df+dfzz_df;

`  B[i][j] = Bpart;\n`;
`  DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE\n`;
###############################################


###############################################
###### E matrix: J[ijk][lmn] in Jx = -F #######
###############################################
`  DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN\n`;

Epart = dfxx_df+dfyy_df+dfzz_df;

`  E_Trans[j][i] = Epart;\n`;
`  DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE\n`;
###############################################

`  return 0;`;
`}`;

