# BH-filler eq Brown's way

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;


# main function:
`#include "bbn_headers.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *bbn_bhf_eq_Brown(void *vp1,void *vp2);`;
`void *bbn_bhf_eq_Brown(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_EQ_DECLARE`;
`  unsigned ijk;/* node index */`;

## which field it is
`  const Solving_Man_T *const sol = patch->solving_man;`
`  const char *const fld_name     = sol->field_name[sol->cf];`
`  char eq_fld_name[100] = {'\0'};`
``

# declare for Cpi:
Declare = 
{
 # (B)rown field
 (obj = Field,name = B, rank = 0, none);

 # d^2 B/dx^2
 (obj = Field,name = ddB_xx, rank = 0, none);

 # d^2 B/dy^2
 (obj = Field,name = ddB_yy, rank = 0, none);

 # d^2 B/dz^2
 (obj = Field,name = ddB_zz, rank = 0, none);

}

`sprintf(eq_fld_name,"src_%s",fld_name);`
`const double *const B = patch->fields[Ind(eq_fld_name)]->v;`

`sprintf(eq_fld_name,"dd%s_D0D0",fld_name);`
`const double *const ddB_xx = patch->fields[Ind(eq_fld_name)]->v;`

`sprintf(eq_fld_name,"dd%s_D1D1",fld_name);`
`const double *const ddB_yy = patch->fields[Ind(eq_fld_name)]->v;`

`sprintf(eq_fld_name,"dd%s_D2D2",fld_name);`
`const double *const ddB_zz = patch->fields[Ind(eq_fld_name)]->v;`

##########################################################################
# NOTE: In domain decomposition method n is relabed from point ijk.
# In fact ijk is mapped to point n, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################

`  DDM_SCHUR_EQ_OPEN\n`;

## simple laplace equation
F_eq = ddB_xx+ddB_yy+ddB_zz-B;

`  F[n] = F_eq;\n`;# Jx = -F in Newton-Raphson scheme
`  DDM_SCHUR_EQ_CLOSE\n`;

`  return 0;`;
`}`;

