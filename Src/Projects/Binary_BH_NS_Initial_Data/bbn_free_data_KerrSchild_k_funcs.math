### Calculating free data _ddgamma and _dddgamma analytically.

#########################
### H O W  T O  U S E ###
#########################
# Issue the following (TAKES A VERY VERY LONG TIME):
# 
# $ cpi bbn_free_data_KerrSchild_k_funcs.math > \
#   bbn_free_data_KerrSchild_k_funcs.c && \
#   sed -i '/Welcome to Cpi/,$d' bbn_free_data_KerrSchild_k_funcs.c

Dimension = 3;
point = x;
C_macro=name_(diff(name).doit());
C_macro2=print('double bbn_name_KS_freedataKS_func_args_macro;');
C_macro3=print('double bbn_name_KS_freedataKS_func_args_macro')\n\
	print('{')\n\
	print('return')\n\
	print(mcode(name));\n\
	print('}');

## libs
`from __future__ import division`
`from sympy import *`
`from sympy.tensor.tensor import TensorIndexType, TensorHead`
`from sympy.tensor.tensor import tensor_indices`
`from sympy.functions import transpose`
`from sympy.parsing.mathematica import mathematica`
`import sys`
`import re`
`import os`

### ccode generator
`def mcode(m,s=2):`
`  print('/* mcode in progress ... */')`
`  sys.stdout.flush()`
`  m = (m).doit()`
`  code = ""`
`  if (s==1):`
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%];\n"`
`    math_code += "c=CForm[%];\n"`
`    math_code += "Print[c]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`  elif (s==2):`
`    code = ccode(simplify(m))`
`  else:`
`    code = ccode(m)`
``
## return the code and break long lines
`  code = '{};'.format(code)`
`  code = re.sub(r'\b1.0\*\b','',code)`
`  code = re.sub(r'(.{50,70}[\+\-\*/]+\s?)','\\1{}n'.format("\\"),code)`
``
`  return code`
``

### simplify using mathematica or sympy or none:
`def msimplify(m,msg="...",s="mathematica"):`
`  print('/* msimplify({}) */'.format(msg))`
`  sys.stdout.flush()`
`  code = ""`
`  if (s=="mathematica"):`# if you want mathematica
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%,TimeConstraint->1000];\n"`
`    math_code += "Print[%]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`    return mathematica(code)`
`  elif(s=="sympy"):` ## if you wanna simpy simplify
`    code = simplify(m)`
`    return code`
`  else:` ## no simplification
`    return m`
``
``
``
`### symbols`
`x,y,z               = symbols('x,y,z')`
`r0,M_BH,a_BH,Lambda = symbols('r0,M_BH,a_BH,Lambda')`
`Bx,By,Bz,B2         = symbols('Bx,By,Bz,B2')`
`phiy,phiz           = symbols('phiy,phiz')`
``
`### functions`
`_x  = symbols('_x',cls=Function)`
`_y  = symbols('_y',cls=Function)`
`_z  = symbols('_z',cls=Function)`
`_k0  = symbols('_k0',cls=Function)`
`_k1  = symbols('_k1',cls=Function)`
`_k2  = symbols('_k2',cls=Function)`
`H    = symbols('H',cls=Function)`

``
`### radius function in Kerr-Schild coords:`
`def KS_radius(_x,_y,_z,a):`
`  r2 = (_x**2+_y**2+_z**2)`
`  a2 = a**2`
`  return (0.5*(r2-a2+sqrt((r2-a2)**2+4*a2*_z**2)))`
``
``
`### H function in Kerr-Schild coords`
`def KS_Hfunc(M_BH,_r,a,_z,Lambda):`
`  _k2 = _z/_r;`
`  a2  = a**2`
`  _r2 = _r**2`
`  return (Lambda*M_BH*_r/(_r2+a2*_k2**2))`
``
``
`### perform boost and rotation transformation, dir = [1,-1]`
`def Boost_Rotation(B,Ry,Rz,dir,v):`
`  if (dir == 1):`
`    return simplify(B*Rz*Ry)*v`
`  elif (dir == -1):`
`    return simplify(Ry**-1*Rz**-1)*(simplify(B**-1))*v`
`  else:`
`    raise Exception('Bad argument')`
``
``
`### populate boost transformation matrix:`
`def Boost_matrix(Bx,By,Bz,B2):`
`   gamma  = (1-B2)**(-0.5)`
`   b = Matrix([`
`     [gamma    , -gamma*Bx            , -gamma*By            , -gamma*Bz],`
`     [-gamma*Bx, 1+(gamma-1)*Bx**2/B2 , (gamma-1)*Bx*By/B2   , (gamma-1)*Bx*Bz/B2],`
`     [-gamma*By, (gamma-1)*Bx*By/B2   , 1+(gamma-1)*By**2/B2 , (gamma-1)*By*Bz/B2],`
`     [-gamma*Bz, (gamma-1)*Bx*Bz/B2   , (gamma-1)*By*Bz/B2   , 1+(gamma-1)*Bz**2/B2]`
`     ])`
`     `
`   return b;`
``
`### populate rotation transformaion matrix:`
`def Rotation_matrix(phiy,phiz):`
`  cy = cos(phiy)`
`  sy = sin(phiy)`
`  cz = cos(phiz)`
`  sz = sin(phiz)`
`  `
`  ty = Matrix([`
`     [1,0  ,0,0],`
`     [0,cy ,0,sy],`
`     [0,0  ,1,0],`
`     [0,-sy,0,cy]`
`     ])`
`     `
`  tz = Matrix([`
`     [1,0 ,0  ,0],`
`     [0,cz,-sz,0],`
`     [0,sz,cz ,0],`
`     [0,0 ,0  ,1]`
`     ])`
`     `
`  return ty, tz  `
``
``
`### get ks and H needed to populate Kerr-Schild`
`def get_ks_and_H(x,y,z,a,m,Bx,By,Bz,B2,phiy,phiz):`

#`  x_mu     = transpose(Matrix([[0,x,y,z]]))`
#`  tB       = Boost_matrix(Bx,By,Bz,B2)`
#`  tRy, tRz = Rotation_matrix(phiy,phiz)`
#`  _x_mu = Boost_Rotation(tB,tRy,tRz,-1,x_mu)`
#`  _x    = msimplify(_x_mu[1,0],"_x")`
#`  _y    = msimplify(_x_mu[2,0],"_y")`
#`  _z    = msimplify(_x_mu[3,0],"_z")`
#`  _r    = KS_radius(_x,_y,_z,a)`

#`  _r  = KS_radius(_x(x,y,z),_y(x,y,z),_z(x,y,z),a)`
#`  a2  = a**2`
#`  _r2 = _r**2`
#`  _k0 = msimplify((_r*_x(x,y,z)+a*_y(x,y,z))/(_r2+a2))`
#`  _k1 = msimplify((_r*_y(x,y,z)-a*_x(x,y,z))/(_r2+a2))`
#`  _k2 = msimplify((_z(x,y,z)/_r))`
#`  _kt = 1`
``
### to lower the file size
`  tB       = Boost_matrix(Bx,By,Bz,B2)`
`  tRy, tRz = Rotation_matrix(phiy,phiz)`
`  _k_mu    = transpose(Matrix(`
`              [[1,_k0(x,y,z),_k1(x,y,z),_k2(x,y,z)]]))`
`  k_mu     = Boost_Rotation(tB,tRy,tRz,1,_k_mu)`
`  `
`  print("/* kt */")`
`  sys.stdout.flush()`
`  kt = (k_mu[0,0])`
`  `
`  print("/* k0 */")`
`  sys.stdout.flush()`
`  k0 = (k_mu[1,0])`
`  `
`  print("/* k1 */")`
`  sys.stdout.flush()`
`  k1 = (k_mu[2,0])`
`  `
`  print("/* k2 */")`
`  sys.stdout.flush()`
`  k2 = (k_mu[3,0])`
`  `
#`  print("/* H */")`
#`  sys.stdout.flush()`
#`  _r= KS_radius(_x(x,y,z),_y(x,y,z),_z(x,y,z),a)`
#`  H = msimplify(KS_Hfunc(m,_r,a,_z(x,y,z),Lambda),"H","none")`
`  `
`  return kt,k0,k1,k2`
``
`### evaluates:`
`kt,k0,k1,k2 = get_ks_and_H(x,y,z,a_BH,M_BH,Bx,By,Bz,B2,phiy,phiz)`
`r   = (x**2+y**2+z**2)**0.5`
`e   = exp(-(r/r0)**4)`
`c   = 2*H(x,y,z)*e`
`a   = a_BH`
`_r  = KS_radius(_x(x,y,z),_y(x,y,z),_z(x,y,z),a)`
`_r2 = _r**2`
`a2  = a**2`
`func_k0 = ((_r*_x(x,y,z)+a*_y(x,y,z))/(_r2+a2))`
`func_k1 = ((_r*_y(x,y,z)-a*_x(x,y,z))/(_r2+a2))`
`func_k2 = ((_z(x,y,z)/_r))`

Declare =
{
#### diff

 # k0
 #(obj = Field,name = k0, rank = 0, C_macro);
 # dk0
 (obj = Field,name = dk0, rank = D, C_macro);
 # dd k0
 (obj = Field,name = ddk0, rank = DD, C_macro);
 # ddd k0
 (obj = Field,name = dddk0, rank = DDD, C_macro);

 # k1
 #(obj = Field,name = k1, rank = 0, C_macro);
 # d k1
 (obj = Field,name = dk1, rank = D, C_macro);
 # dd k1
 (obj = Field,name = ddk1, rank = DD, C_macro);
 # ddd k1
 (obj = Field,name = dddk1, rank = DDD, C_macro);

 # k2
 #(obj = Field,name = k2, rank = 0, C_macro);
 # d k2
 (obj = Field,name = dk2, rank = D, C_macro);
 # dd k2
 (obj = Field,name = ddk2, rank = DD, C_macro);
 # ddd k2
 (obj = Field,name = dddk2, rank = DDD, C_macro);

 # func_k0
 #(obj = Field,name = func_k0, rank = 0, C_macro);
 # dfunc_k0
 (obj = Field,name = dfunc_k0, rank = D, C_macro);
 # dd func_k0
 (obj = Field,name = ddfunc_k0, rank = DD, C_macro);
 # ddd func_k0
 (obj = Field,name = dddfunc_k0, rank = DDD, C_macro);

 # k1
 #(obj = Field,name = k1, rank = 0, C_macro);
 # d k1
 (obj = Field,name = dk1, rank = D, C_macro);
 # dd k1
 (obj = Field,name = ddk1, rank = DD, C_macro);
 # ddd k1
 (obj = Field,name = dddk1, rank = DDD, C_macro);

 # func_k1
 #(obj = Field,name = func_k1, rank = 0, C_macro);
 # d func_k1
 (obj = Field,name = dfunc_k1, rank = D, C_macro);
 # dd func_k1
 (obj = Field,name = ddfunc_k1, rank = DD, C_macro);
 # ddd func_k1
 (obj = Field,name = dddfunc_k1, rank = DDD, C_macro);

 # k2
 #(obj = Field,name = k2, rank = 0, C_macro);
 # d k2
 (obj = Field,name = dk2, rank = D, C_macro);
 # dd k2
 (obj = Field,name = ddk2, rank = DD, C_macro);
 # ddd k2
 (obj = Field,name = dddk2, rank = DDD, C_macro);

 # func_k2
 #(obj = Field,name = func_k2, rank = 0, C_macro);
 # d func_k2
 (obj = Field,name = dfunc_k2, rank = D, C_macro);
 # dd func_k2
 (obj = Field,name = ddfunc_k2, rank = DD, C_macro);
 # ddd func_k2
 (obj = Field,name = dddfunc_k2, rank = DDD, C_macro);

 # c
 #(obj = Field,name = c, rank = 0, C_macro);
 # d c
 (obj = Field,name = dc, rank = D, C_macro);
 # dd c
 (obj = Field,name = ddc, rank = DD, C_macro);
 # ddd c
 (obj = Field,name = dddc, rank = DDD, C_macro);

#### c function declarations

 # k0
 (obj = Field,name = k0, rank = 0, C_macro2);
 # dk0
 (obj = Field,name = dk0, rank = D, C_macro2);
 # dd k0
 (obj = Field,name = ddk0, rank = DD, C_macro2);
 # ddd k0
 (obj = Field,name = dddk0, rank = DDD, C_macro2);

 # func_k0
 #(obj = Field,name = func_k0, rank = 0, C_macro2);
 # dfunc_k0
 (obj = Field,name = dfunc_k0, rank = D, C_macro2);
 # dd func_k0
 (obj = Field,name = ddfunc_k0, rank = DD, C_macro2);
 # ddd func_k0
 (obj = Field,name = dddfunc_k0, rank = DDD, C_macro2);

 # k1
 (obj = Field,name = k1, rank = 0, C_macro2);
 # d k1
 (obj = Field,name = dk1, rank = D, C_macro2);
 # dd k1
 (obj = Field,name = ddk1, rank = DD, C_macro2);
 # ddd k1
 (obj = Field,name = dddk1, rank = DDD, C_macro2);

 # func_k1
 #(obj = Field,name = func_k1, rank = 0, C_macro2);
 # d func_k1
 (obj = Field,name = dfunc_k1, rank = D, C_macro2);
 # dd func_k1
 (obj = Field,name = ddfunc_k1, rank = DD, C_macro2);
 # ddd func_k1
 (obj = Field,name = dddfunc_k1, rank = DDD, C_macro2);

 # k2
 (obj = Field,name = k2, rank = 0, C_macro2);
 # d k2
 (obj = Field,name = dk2, rank = D, C_macro2);
 # dd k2
 (obj = Field,name = ddk2, rank = DD, C_macro2);
 # ddd k2
 (obj = Field,name = dddk2, rank = DDD, C_macro2);

 # func_k2
 #(obj = Field,name = func_k2, rank = 0, C_macro2);
 # d func_k2
 (obj = Field,name = dfunc_k2, rank = D, C_macro2);
 # dd func_k2
 (obj = Field,name = ddfunc_k2, rank = DD, C_macro2);
 # ddd func_k2
 (obj = Field,name = dddfunc_k2, rank = DDD, C_macro2);


 # c
 #(obj = Field,name = c, rank = 0, C_macro2);
 # d c
 (obj = Field,name = dc, rank = D, C_macro2);
 # dd c
 (obj = Field,name = ddc, rank = DD, C_macro2);
 # ddd c
 (obj = Field,name = dddc, rank = DDD, C_macro2);


#### c function definition

 # k0
 (obj = Field,name = k0, rank = 0, C_macro3);
 # dk0
 (obj = Field,name = dk0, rank = D, C_macro3);
 # dd k0
 (obj = Field,name = ddk0, rank = DD, C_macro3);
 # ddd k0
 (obj = Field,name = dddk0, rank = DDD, C_macro3);

 # func_k0
 #(obj = Field,name = func_k0, rank = 0, C_macro3);
 # dfunc_k0
 (obj = Field,name = dfunc_k0, rank = D, C_macro3);
 # dd func_k0
 (obj = Field,name = ddfunc_k0, rank = DD, C_macro3);
 # ddd func_k0
 (obj = Field,name = dddfunc_k0, rank = DDD, C_macro3);

 # k1
 (obj = Field,name = k1, rank = 0, C_macro3);
 # d k1
 (obj = Field,name = dk1, rank = D, C_macro3);
 # dd k1
 (obj = Field,name = ddk1, rank = DD, C_macro3);
 # ddd k1
 (obj = Field,name = dddk1, rank = DDD, C_macro3);

 # func_k1
 #(obj = Field,name = func_k1, rank = 0, C_macro3);
 # d func_k1
 (obj = Field,name = dfunc_k1, rank = D, C_macro3);
 # dd func_k1
 (obj = Field,name = ddfunc_k1, rank = DD, C_macro3);
 # ddd func_k1
 (obj = Field,name = dddfunc_k1, rank = DDD, C_macro3);

 # k2
 (obj = Field,name = k2, rank = 0, C_macro3);
 # d k2
 (obj = Field,name = dk2, rank = D, C_macro3);
 # dd k2
 (obj = Field,name = ddk2, rank = DD, C_macro3);
 # ddd k2
 (obj = Field,name = dddk2, rank = DDD, C_macro3);

 # func_k2
 #(obj = Field,name = func_k2, rank = 0, C_macro3);
 # d func_k2
 (obj = Field,name = dfunc_k2, rank = D, C_macro3);
 # dd func_k2
 (obj = Field,name = ddfunc_k2, rank = DD, C_macro3);
 # ddd func_k2
 (obj = Field,name = dddfunc_k2, rank = DDD, C_macro3);

 # c
 #(obj = Field,name = c, rank = 0, C_macro3);
 # d c
 (obj = Field,name = dc, rank = D, C_macro3);
 # dd c
 (obj = Field,name = ddc, rank = DD, C_macro3);
 # ddd c
 (obj = Field,name = dddc, rank = DDD, C_macro3);

}

# symmetries:
Symm[ddk0(i,j)    = ddk0(j,i)];
Symm[dddk0(i,j,k) = dddk0(j,i,k)];

Symm[ddk1(i,j)    = ddk1(j,i)];
Symm[dddk1(i,j,k) = dddk1(j,i,k)];

Symm[ddk2(i,j)      = ddk2(j,i)];
Symm[dddk2(i,j,k)   = dddk2(j,i,k)];

Symm[ddc(i,j)      = ddc(j,i)];
Symm[dddc(i,j,k)   = dddc(j,i,k)];


### make it ready for python:
### remove C comments:
Command["sed -i 's/\/\* declaring: \*\///'"];

### remove spaces:
Command["sed -i 's/^  d/d/g'"];
Command["sed -i "s/^  print('double/print('double/g""];

### derivatives d/dx
Command["sed -i 's/0)\.doit/,x)\.doit/g'"];
### derivatives d/dy
Command["sed -i 's/1)\.doit/,y)\.doit/g'"];
### derivatives d/dz
Command["sed -i 's/2)\.doit/,z)\.doit/g'"];
### no doit
Command["sed -i 's/\.doit()//g'"];
### indices
Command["sed -i 's/D,/,/g'"];
Command["sed -i 's/diff(d/diff(/g'"];
Command["sed -i 's/_(diff/=(diff/g'"];
Command["sed -i 's/_,/,/g'"];

### functions:
Command["sed -i 's/double/double /g'"];
Command["sed -i 's/KS_func_args_macro/ KS_func_args_macro/g'"];

### remove C comments:
Command["sed -i '1,5d'"];
### run python
Comand["python "];
#Comand["cat "];

### rm redundants
Comand["rm "];
