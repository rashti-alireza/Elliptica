# equation: ?

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = GET_FIELD(name);
C_macro2 = PREP_FIELD(name);

# main function:
Ccode["#include "bbn_headers.h""];
Ccode["#include "bbn_XCTS_equations_lib.h""];
Ccode["#include "maths_equation_solvings_lib.h"\n\n"];
Ccode["void *eq_?(void *vp1,void *vp2)\n{"];

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
Ccode["  DDM_SCHUR_EQ_DECLARE"];
Ccode["  unsigned ijk;/* node index */"];

# declare for Cpi:
Declare = 
{
}

# symmetries for Cpi:

##########################################################################
# NOTE: In domain decomposition method n is relabed from point ijk.
# In fact ijk is mapped to point n, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################

Ccode["  DDM_SCHUR_EQ_OPEN"];

	 # write the equation below in terms of ijk:
         F_eq = 0;

Ccode["  F[n] = F_eq;"];# Jx = -F in Newton-Raphson scheme
Ccode["  DDM_SCHUR_EQ_CLOSE\n"];

Ccode["  return 0;"];
Ccode["}"];

