# _Ricci scalar

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro = GET_FIELD_UNUSED(name);
C_macro1 = ADD_FIELD(name);
C_macro2 = PREP_FIELD(name);

# main function:
Ccode["#include "bbn_headers.h"\n\n"];
Ccode["void bbn_free_data_Ricci(Grid_T *const grid)\n{"];
Ccode["  const unsigned np = grid->np;"];
Ccode["  unsigned p;\n"];
Ccode["  OpenMP_1d_Pragma(omp parallel for)"];
Ccode["  for(p = 0; p < np; ++p)"];
Ccode["  {"];
Ccode["    Patch_T *patch = grid->patch[p];"];

Declare = 
{
 # conformal metric inverse
 (obj = Field,name = _gammaI, rank = UU, C_macro);
 # partial derivative of conformal metric
 (obj = Field,name = _dGamma, rank = UDDD, C_macro);
 # Christoffer symbol value
 (obj = Field,name = _Gamma, rank = UDD, C_macro);
 # Ricci tensor
 (obj = Field,name = _RicUD, rank = UD, C_macro2);
}

# symmetries:
Symm[_gammaI(i,j)     = _gammaI(j,i)];
Symm[_dGamma(i,j,k,l) = _dGamma(i,k,j,l)];
Symm[_Gamma(i,j,k)    = _Gamma(i,k,j)];
Symm[_RicUD(i,j)      = _RicUD(j,i)];

Ccode["    unsigned nn = patch->nn;"];
Ccode["    unsigned ijk;"];
Ccode["    PREP_FIELD(_R)"];
Ccode["    for(ijk = 0; ijk < nn; ++ijk)"];
Ccode["    {"];

# Ricci calculation:
#Ric(-a,-b)    = (_dGamma(c,a,b,i)*KD(-i,-c) - _dGamma(c,a,i,b)*KD(-i,-c) +\
#                 _Gamma(d,a,b)*_Gamma(c,i,j)*KD(-i,-c)*KD(-j,-d) - \
#                 _Gamma(d,a,i)*_Gamma(c,b,j)*KD(-i,-c)*KD(-j,-d) );

Ric1(-a,-b)    =   _dGamma(c,ap,bp,i)*KD(-i,-c)*KD(-ap,a)*KD(-bp,b);
Symm[Ric1(i,j) = Ric1(j,i)];

Ric2(-a,-b)    = - _dGamma(c,a,i,b)*KD(-i,-c);
Symm[Ric2(i,j) = Ric2(j,i)];

Ric3(-a,-b)    =   _Gamma(d,a,b)*_Gamma(c,i,j)*KD(-i,-c)*KD(-j,-d);
Symm[Ric3(i,j) = Ric3(j,i)];

Ric4(-a,-b)    = - _Gamma(d,a,i)*_Gamma(c,b,j)*KD(-i,-c)*KD(-j,-d);
Symm[Ric4(i,j) = Ric4(j,i)];

Ric(-a,-b)     = Ric1(-a,-b)+Ric2(-a,-b)+Ric3(-a,-b)+Ric4(-a,-b);
Symm[Ric(i,j)  = Ric(j,i)];

R              = _gammaI(a,b)*Ric(-a,-b);

RIC(a,-b)      = _gammaI(a,i)*Ric(-i,-b);
Symm[RIC(i,j)  = RIC(j,i)];

Ccode["      _R[ijk] = R;"];
Cpopulate[_RicUD     = RIC];

Ccode["    }/*end of for(ijk = 0; ijk < nn; ++ijk)*/"];
Ccode["  }"];
Ccode["}"]; # end of _Gamma function
