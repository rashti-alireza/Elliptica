# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);

`#include "bbn_headers.h"\n`

# return the Kommar mass of BH
`double bbn_BH_Kommar_mass(Grid_T *const grid);`
`double bbn_BH_Kommar_mass(Grid_T *const grid)`
`{`
`  double BH_Kommar_mass = 0;`
`  unsigned p;`
``
`  FOR_ALL_PATCHES(p,grid)`
`  {`
`    Patch_T *patch = grid->patch[p];`
`    unsigned nn    = patch->nn;`
`    unsigned ijk;`
``
`    if (!IsItHorizonPatch(patch))`
`      continue;`

`    ADD_FIELD(BH_Kommar_mass_integrand)`
``
`    double *g00 = alloc_double(nn);`
`    double *g01 = alloc_double(nn);`
`    double *g02 = alloc_double(nn);`
`    double *g11 = alloc_double(nn);`
`    double *g12 = alloc_double(nn);`
`    double *g22 = alloc_double(nn);`

Declare = 
{
 # conformal metric 
 (obj = Field,name = _gamma, rank = DD, C_macro);

 # conformal metric inverse
 #(obj = Field,name = _gammaI, rank = UU, C_macro);

 # _A^{ij}
 (obj = Field,name = _A_UiUj, rank = UU, C_macro);

 # eta
 (obj = Field,name = eta, rank = 0, C_macro);

 # deta
 (obj = Field,name = deta, rank = D, C_macro);

 # Beta
 (obj = Field,name = Beta, rank = U, C_macro);

 # trKij
 (obj = Field,name = K, rank = 0, C_macro);

 # Killing vector xi^i, assumed 0
 #(obj = Field,name = xi, rank = U, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # d(conformal factor)
 (obj = Field,name = dpsi, rank = D, C_macro);

 # normal vector on AH
 (obj = Field,name = _HS, rank = U, C_macro);

 # integrand P
 #(obj = Field,name = BH_Kommar_mass_integrand, rank = 0, none);

}
# symmetries:
Symm[_A_UiUj(i,j)  = _A_UiUj(j,i)];
#Symm[_gammaI(i,j)  = _gammaI(j,i)];
Symm[_gamma(i,j)   = _gamma(j,i)];

`{`# make it local variables
`    REALLOC_v_CALL_v(BH_Kommar_mass_integrand)`

# populate inegrand and physical metric for the integration
`    for(ijk = 0; ijk < nn; ++ijk)`
`    {`
       psim2 = psi**-2;
       psi2  = psi**2;
       psi4  = psi**4;
       s(i)  = psim2*_HS(i);
       dalpha(i) = deta(i)/psi-eta*dpsi(i)/psi2;
       K_DD(-i,-j) = psim2*_A_UiUj(ip,jp)*_gamma(i,-ip)*_gamma(j,-jp)+\
		    1/3*K*psi4*_gamma(i,j);
       Symm[K_DD(i,j) = K_DD(j,i)];
       integrand = s(-i)*(dalpha(i)-K_DD(i,j)*Beta(-j));
``
`      BH_Kommar_mass_integrand[ijk] = integrand;`
`      /* metric */`
`      g00[ijk] = psi4*_gamma_D0D0[ijk];`
`      g01[ijk] = psi4*_gamma_D0D1[ijk];`
`      g02[ijk] = psi4*_gamma_D0D2[ijk];`
`      g11[ijk] = psi4*_gamma_D1D1[ijk];`
`      g12[ijk] = psi4*_gamma_D1D2[ijk];`
`      g22[ijk] = psi4*_gamma_D2D2[ijk];`
`    }`
`}`
``
`  DECLARE_FIELD(BH_Kommar_mass_integrand)`
`  Integration_T *I = init_integration();`
`  I->type = "Integral{f(x)dS},Spectral";`
`  I->Spectral->f = BH_Kommar_mass_integrand;`
`  I->g00 = g00;`
`  I->g01 = g01;`
`  I->g02 = g02;`
`  I->g11 = g11;`
`  I->g12 = g12;`
`  I->g22 = g22;`
`  I->Spectral->Z_surface = 1;`
`  I->Spectral->K         = 0;`

`  plan_integration(I);`
`  BH_Kommar_mass += execute_integration(I);`
``
`  free_integration(I);`
`  REMOVE_FIELD(BH_Kommar_mass_integrand)`
`  free(g00);`
`  free(g01);`
`  free(g02);`
`  free(g11);`
`  free(g12);`
`  free(g22);`

`  }`# end of FOR_ALL_PATCHES
``
`  BH_Kommar_mass /= (4*M_PI);`
`  return BH_Kommar_mass;`

`}`
