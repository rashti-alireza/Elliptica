# use the definition of P ADM at S infinite and carry out the integration
# at arbitrary surface.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);

`#include "obs_header.h"`
``
``
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) >= 0)\`# means if it exists already
         `  {DECLARE_FIELD(name);REMOVE_FIELD(name);}\`
         `  ADD_FIELD(name);REALLOC_v_WRITE_v(name);`
``
``
`void obs_populate_P_S_default(Observe_T *const obs);`
`void obs_populate_P_S_default(Observe_T *const obs)`
`{`
`  struct items_S **adm = obs->items;`
`  const Uint N = obs->Nitems;`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`  Patch_T *patch = adm[p]->patch;`
`  Uint nn = patch->nn;`
`  Uint ijk;`

Declare = 
{
  # _A^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor derivative
 #(obj = Field,name = dpsi, rank = D, C_macro);

 # Christoffer symbol value
 #(obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # normal vector components
 (obj = Field,name = n, rank = U, none);

 # integrand P
 (obj = Field,name = obs__P, rank = D, C_macro2);
}
# symmetries:
Symm[AConfIJ(i,j)  = AConfIJ(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];

``
# populating the integrands:
`      const double *n_U0 = adm[p]->n_U0;`
`      const double *n_U1 = adm[p]->n_U1;`
`      const double *n_U2 = adm[p]->n_U2;`
``
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`
       psi4   = psi**4;

       psim2  = psi**-2;

       Pn(-i) = n(-j)*\
(psim2*AConfIJ(ip,jp)*gConf(i,-ip)*gConf(j,-jp)+(1/3)*trK*psi4*gConf(i,j));

       Cpopulate[obs__P = Pn];
`      }`
``
## carry out the integration:
`  obs->ret[0] = obs_integral_SV`
`                 (obs,"obs__Pn_D0",0,'+','+')/(8*M_PI);`
`  obs->ret[1] = obs_integral_SV`
`                 (obs,"obs__Pn_D1",0,'+','+')/(8*M_PI);`
`  obs->ret[2] = obs_integral_SV`
`                 (obs,"obs__Pn_D2",0,'+','+')/(8*M_PI);`
`  }`
``
## remove fields
`  for(p = 0; p < N; ++p)`
`  {`
`    Patch_T *patch = adm[p]->patch;`
`    remove_field_with_regex(patch,"^obs__Pn_D.$");`
`  }`
``
`}`



