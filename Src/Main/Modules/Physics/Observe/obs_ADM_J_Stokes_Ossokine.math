# calculating ADM angular momentum
# using arxiv:1506.01689 formalism.
# NOTE: the error of at outermost patches could be quite large it could be
#       up to 2-3% off! however, for maximal slices and conformally flat
#       metric the contribution of this integral is zero.
# NOTE: the volume integral must not cover matter, see arxiv:1506.01689.
# NOTE: the definition of ADM angular momentum is only held when
#       quasi-isotropic and asymptotically maximal gauge are satisfied,
#       see arXiv:gr-qc/0703035v1.
# NOTE: calculation of J is very restrictive and works best when 
#       conformal metric is flat and trK is zero; thus, HERE WE ASSUME
#       on the surface where the integraion carried out whether 
#       conformal metric is flat and trK is zero like NS-NS system
#       or the surface is at infinity which these conditions are met.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);
C_macro3 = declare_and_alloc_xi(name);

`#include "obs_header.h"`
``
`#define declare_and_alloc_xi(name) \`
	`  double *name = alloc_double(nn);`
``
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) >= 0)\`# means if it exists already
         `  {DECLARE_FIELD(name);REMOVE_FIELD(name);}\`
         `  ADD_FIELD(name);REALLOC_v_WRITE_v(name);`
``
``
`void obs_ADM_J_Stokes_Ossokine(Observe_T *const obs);`
`void obs_ADM_J_Stokes_Ossokine(Observe_T *const obs)`
`{`
`  Physics_T *const phys = obs->phys;`
`  struct items_S **adm  = obs->items;`
`  const Uint N = obs->Nitems;`
`  const double x_cm = sysGetd("x_CM");`
`  const double y_cm = sysGetd("y_CM");`
`  const double z_cm = sysGetd("z_CM");`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`  Patch_T *patch = adm[p]->patch;`
`  Uint nn = patch->nn;`
`  Uint ijk;`

Declare = 
{
  # AConf^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # normal vector components
 (obj = Field,name = n, rank = U, none);

 # integrand xiP
 (obj = Field,name = obs_ADM_integrand__xiP, rank = U, C_macro2);

 # xi
 (obj = Field,name = xi, rank = U, C_macro3);

}
# symmetries:
Symm[AConfIJ(i,j)  = AConfIJ(j,i)];
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

``
`   for(ijk = 0; ijk < nn; ++ijk)`
`   {`
`     double x    = patch->node[ijk]->x[0];`
`     double y    = patch->node[ijk]->x[1];`
`     double z    = patch->node[ijk]->x[2];`
`     xi_U0[ijk] = x-x_cm;`
`     xi_U1[ijk] = y-y_cm;`
`     xi_U2[ijk] = z-z_cm;`
`   }`
# populating the integrands:

# if we needs surface integral too.
`   if (adm[p]->surface_integration_flg)`
`   {`
`      const double *n_U0 = adm[p]->n_U0;`
`      const double *n_U1 = adm[p]->n_U1;`
`      const double *n_U2 = adm[p]->n_U2;`
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`
       psi4   = psi**4;

       # psi^10 K^{ij} where trK assume zero at large distances
       Pn(i)  = AConfIJ(i,j)*n(k)*gConf(-j,-k)*psi4;
       xiP(i) = EIJK(i,j,k)*xi(-j)*Pn(-k);

       Cpopulate[obs_ADM_integrand__xiP = xiP];
`      }`
`   }`
``
`   free(xi_U0);`
`   free(xi_U1);`
`   free(xi_U2);`
``
`  }`# end of for(p = 0; p < N; ++p)
``

`  obs->ret[0] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__xiP_U0",0);`
`  obs->ret[1] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__xiP_U1",0);`
`  obs->ret[2] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__xiP_U2",0);`
``
`  for(p = 0; p < N; ++p)`
`  {`
`    Patch_T *patch = adm[p]->patch;`
`    remove_field_with_regex(patch,"^obs_ADM_integrand__xiP_U.$");`
`  }`
``
`}`
