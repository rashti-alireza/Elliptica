# populating ADM momentum integrand P^{ij}*n_{j} and G^{i} 
# using arxiv:1506.01689 formalism.
# their names are ADM_integrand_P and ADM_integrand_G respectively.
# NOTE: the error of at outermost patches could be quite large it could be
#       up to 2-3% off! however, for maximal slices and conformally flat
#       metric the contribution of this integral is zero.
# NOTE: the volume integral must not cover matter, see arxiv:1506.01689.
# NOTE: the definition of ADM angular momentum is only held when
#       quasi-isotropic and asymptotically maximal gauge are satisfied,
#       see arXiv:gr-qc/0703035v1.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);

`#include "core_lib.h"`
`#include "physics_observe_lib.h"`
`#include "utilities_lib.h"`
`#include "manifold_lib.h"`
`#include "maths_general_lib.h"`
`#include "maths_calculus_lib.h"`
`#include "fields_lib.h"`
`#include "obs_header.h"`
``
``
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) >= 0)\`# means if it exists already
         `  {DECLARE_FIELD(name);REMOVE_FIELD(name);}\`
         `  ADD_FIELD(name);REALLOC_v_WRITE_v(name);`
``
``
`void obs_ADM_P_integral_PdS_GdV(const Observe_T *const obs);`
`void obs_ADM_P_integral_PdS_GdV(const Observe_T *const obs)`
`{`
`  Physics_T *const phys = obs->phys;`
`  struct items_S **adm = obs->items;`
`  const Uint N = obs->Nitems;`
`  const double CutOff = 1E8;`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`  Patch_T *patch = adm[p]->patch;`
`  Uint nn = patch->nn;`
`  Uint ijk;`

Declare = 
{
  # AConf^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor derivative
 (obj = Field,name = dpsi, rank = D, C_macro);

 # Christoffer symbol value
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # normal vector components
 (obj = Field,name = n, rank = U, none);

 # integrand P
 (obj = Field,name = obs_ADM_integrand__P, rank = U, C_macro2);

 # integrand G
 (obj = Field,name = obs_ADM_integrand__G, rank = U, C_macro2);

 # attenuation factor
 (obj = variable,name = att, none);
}
# symmetries:
Symm[AConfIJ(i,j)  = AConfIJ(j,i)];
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

``
# populating the integrands:
# if we needs surface integral too.
`   if (adm[p]->surface_integration_flg)`
`   {`
`      const double *n_U0 = adm[p]->n_U0;`
`      const double *n_U1 = adm[p]->n_U1;`
`      const double *n_U2 = adm[p]->n_U2;`
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`
       psi4   = psi**4;
       psi6   = psi**6;
       P(i,j) = AConfIJ(i,j)-(2/3)*trK*psi6*igConf(i,j);
       Symm[P(i,j)  = P(j,i)];

       Pn(i)  = P(i,j)*n(k)*gConf(-j,-k)*psi4;
       Cpopulate[obs_ADM_integrand__P = Pn];
`      }`
`   }`
# if no need for surface inegral.
`    else`
`    {`
# suffix '_' is added to prevent cpi error for duplicate variables
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`
`      DEF_RELATIVE_x`
`      DEF_RELATIVE_y`
`      DEF_RELATIVE_z`
`      DEF_RELATIVE_r`
`      double att = r > CutOff ? 0:1;`
       psi6_   = psi**(6);
       P_(i,j) = AConfIJ(i,j)-(2/3)*trK*psi6_*igConf(i,j);
       Symm[P_(i,j)  = P_(j,i)];

       G1(i) = ChrisConf(i,j,k)*P_(-j,-k) + ChrisConf(j,jp,k)*KD(-j,-jp)*P_(i,-k);
       G2(i) = -2*gConf(-j,-k)*P_(j,k)*igConf(i,l)*dpsi(-l)/psi;
       G(i)  = att*(G1(i)+G2(i));
       Cpopulate[obs_ADM_integrand__G = G];
`      }`
`    }`
``
``
`  }`# end of for(p = 0; p < N; ++p)
``
## carry out the integration:
`  obs->ret[0] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__P_U0","obs_ADM_integrand__G_U0");`
`  obs->ret[1] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__P_U1","obs_ADM_integrand__G_U1");`
`  obs->ret[2] = obs_integral_ADM_PJ_SV`
`                  (obs,"obs_ADM_integrand__P_U2","obs_ADM_integrand__G_U2");`
``
## remove fields
`  for(p = 0; p < N; ++p)`
`  {`
`    Patch_T *patch = adm[p]->patch;`
`    remove_field_with_regex(patch,"^obs_ADM_integrand__P_U.$");`
`    remove_field_with_regex(patch,"^obs_ADM_integrand__G_U.$");`
`  }`
``
`}`
