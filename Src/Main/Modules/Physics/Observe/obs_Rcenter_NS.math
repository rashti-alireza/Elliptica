# calculating R center for NS

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);

`#include "obs_header.h"`
``
## note: surface patches and volume patches might have overlap
## thus, don't remove field if exists.
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) < 0) \`
         `  {ADD_ADN_ALLOC_FIELD(name);} \`
         `  WRITE_v(name);`
``
``

`void obs_Rc_NS(Observe_T *const obs);`
`void obs_Rc_NS(Observe_T *const obs)`
`{` 
`  Physics_T *const phys = obs->phys;`
`  double *const Rc = obs->ret;`
`  Grid_T *const grid = phys->grid;`
`  const double Madm = Getd("ADM_mass");`
`  const double x_CM = sysGetd("x_CM");`
`  const double y_CM = sysGetd("y_CM");`
`  const double z_CM = sysGetd("z_CM");`
`  Uint p;`
``
`  Rc[0] = 0;`
`  Rc[1] = 0;`
`  Rc[2] = 0;`

`  FOR_ALL_PATCHES(p,grid)`
`  {`
`    Patch_T *patch = grid->patch[p];`
`    if (!IsItCovering(patch,"NS"))`
`      continue;`
``
Declare = 
{
 # conformal factor
 #(obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro);

 # conformal factor second derivative 
 (obj = Field,name = ddpsi, rank = DD, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # Christoffer symbol value
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);
}
# symmetries:
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];
Symm[ddpsi(i,j)    = ddpsi(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

`    Uint nn  = patch->nn;`
`    Uint ijk;`
``
`    ADD_FIELD(Rc_integrandx)`
`    ADD_FIELD(Rc_integrandy)`
`    ADD_FIELD(Rc_integrandz)`

# populating the integrands:

`    {` # make it local variable
`    REALLOC_v_WRITE_v(Rc_integrandx)`
`    REALLOC_v_WRITE_v(Rc_integrandy)`
`    REALLOC_v_WRITE_v(Rc_integrandz)`
`    for (ijk = 0; ijk < nn; ++ijk)`
`    {`
     D2psi = igConf(i,j)*ddpsi(-i,-j) -\
         igConf(-i,-j)*ChrisConf(l,i,j)*dpsi(-l);
`    double x = patch->node[ijk]->x[0];`
`    double y = patch->node[ijk]->x[1];`
`    double z = patch->node[ijk]->x[2];`
`    Rc_integrandx[ijk] = D2psi*(x-x_CM);`
`    Rc_integrandy[ijk] = D2psi*(y-y_CM);`
`    Rc_integrandz[ijk] = D2psi*(z-z_CM);`
`    }`
`    }`
`    DECLARE_FIELD(Rc_integrandx)`
`    DECLARE_FIELD(Rc_integrandy)`
`    DECLARE_FIELD(Rc_integrandz)`
`    Integration_T *I = init_integration();`
`    I->type = "Integral{f(x)dV},Spectral";`
`    I->g00 = gConf_D0D0;`
`    I->g01 = gConf_D0D1;`
`    I->g02 = gConf_D0D2;`
`    I->g11 = gConf_D1D1;`
`    I->g12 = gConf_D1D2;`
`    I->g22 = gConf_D2D2;`

`    I->Spectral->f = Rc_integrandx;`
`    plan_integration(I);`
`    Rc[0] += execute_integration(I);`

`    I->Spectral->f = Rc_integrandy;`
`    plan_integration(I);`
`    Rc[1] += execute_integration(I);`

`    I->Spectral->f = Rc_integrandz;`
`    plan_integration(I);`
`    Rc[2] += execute_integration(I);`

`    free_integration(I);`
`    REMOVE_FIELD(Rc_integrandx)`
`    REMOVE_FIELD(Rc_integrandy)`
`    REMOVE_FIELD(Rc_integrandz)`
`  }`# end of  FOR_ALL_PATCHES(p,grid)
``
`  Rc[0] /= (-2*M_PI*Madm);`
`  Rc[1] /= (-2*M_PI*Madm);`
`  Rc[2] /= (-2*M_PI*Madm);`
`}`
