# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);


`#include "obs_header.h"\n`
``
``
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) >= 0)\`# means if it exists already
         `  {DECLARE_FIELD(name);REMOVE_FIELD(name);}\`
         `  ADD_FIELD(name);REALLOC_v_WRITE_v(name);`
``
``
``
# return the Komar mass for the specified object(s)
`double obs_Komar_mass(Observe_T *const obs);`
`double obs_Komar_mass(Observe_T *const obs)`
`{`
`  double Komar_mass = 0;`
`  struct items_S **const Komar = obs->items;`
`  const Uint N = obs->Nitems;`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`    Patch_T *patch     = Komar[p]->patch;`
`    const double *n_U0 = Komar[p]->n_U0;`
`    const double *n_U1 = Komar[p]->n_U1;`
`    const double *n_U2 = Komar[p]->n_U2;`
``
Declare = 
{

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # AConf^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # alphaPsi
 (obj = Field,name = alphaPsi, rank = 0, C_macro);

 # dalphaPsi
 (obj = Field,name = dalphaPsi, rank = D, C_macro);

 # beta
 (obj = Field,name = beta, rank = U, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # d(conformal factor)
 (obj = Field,name = dpsi, rank = D, C_macro);

 # normal vector on S
 (obj = Field,name = n, rank = U, none);

 # EConf
 (obj = Field,name = EConf, rank = 0, C_macro);

 # JConf
 (obj = Field,name = JConf, rank = U, C_macro);

 # SConf
 (obj = Field,name = SConf, rank = 0, C_macro);

 # integrand S
 (obj = Field,name = obs_komar_mass__s, rank = 0, C_macro2);

 # integrand V
 (obj = Field,name = obs_komar_mass__v, rank = 0, C_macro2);

}

# symmetries:
Symm[AConfIJ(i,j)  = AConfIJ(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];

`  if (Komar[p]->surface_integration_flg)`
`  {`
``
# populate inegrand 
`    FOR_ALL_ijk`
`    {`
       psim2 = psi**-2;
       psi2  = psi**2;
       psi4  = psi**4;
       dalpha(i) = dalphaPsi(i)/psi-alphaPsi*dpsi(i)/psi2;
       K_DD(-i,-j) = psim2*AConfIJ(ip,jp)*gConf(i,-ip)*gConf(j,-jp)+\
		    1/3*trK*psi4*gConf(i,j);
       Symm[K_DD(i,j) = K_DD(j,i)];
       integrand_s = n(-i)*(dalpha(i)-K_DD(i,j)*beta(-j));
``
`      obs_komar_mass__s[ijk] = integrand_s;`
`    }`
`    Integration_T *I = init_integration();`
`    I->type = "Integral{f(x)dS},Spectral";`
`    I->Spectral->f = patch->fields[Ind("obs_komar_mass__s")];`
`    I->g00 = Komar[p]->g00;`
`    I->g01 = Komar[p]->g01;`
`    I->g02 = Komar[p]->g02;`
`    I->g11 = Komar[p]->g11;`
`    I->g12 = Komar[p]->g12;`
`    I->g22 = Komar[p]->g22;`
`    I->Spectral->X_surface = Komar[p]->X_surface;`
`    I->Spectral->Y_surface = Komar[p]->Y_surface;`
`    I->Spectral->Z_surface = Komar[p]->Z_surface;`
`    I->Spectral->I         = Komar[p]->I;`
`    I->Spectral->J         = Komar[p]->J;`
`    I->Spectral->K         = Komar[p]->K;`
`    plan_integration(I);`
`    Komar_mass += execute_integration(I)/(4*M_PI);`
`    free_integration(I);`
`    REMOVE_FIELD(patch->fields[Ind("obs_komar_mass__s")]);`
`  }`
`  else`
`  {`
`  FOR_ALL_ijk`
`  {`
    psim6 = psi**-6;
    psi4_ = psi**4;
    alpha = alphaPsi/psi;
    E     = psim6*EConf;
    S     = psim6*SConf;
    J(i)  = psim6*JConf(i);

    integrand_v = alpha*(E+S)-2*beta(i)*J(j)*psi4_*gConf(-i,-j);
`   obs_komar_mass__v[ijk] = integrand_v;`
`  }`
`    Integration_T *I = init_integration();`
`    I->type = "Integral{f(x)dV},Spectral";`
`    I->Spectral->f = patch->fields[Ind("obs_komar_mass__v")];`
`    I->g00 = Komar[p]->g00;`
`    I->g01 = Komar[p]->g01;`
`    I->g02 = Komar[p]->g02;`
`    I->g11 = Komar[p]->g11;`
`    I->g12 = Komar[p]->g12;`
`    I->g22 = Komar[p]->g22;`
`    plan_integration(I);`
`    Komar_mass += execute_integration(I);`
`    free_integration(I);`
`    REMOVE_FIELD(patch->fields[Ind("obs_komar_mass__v")]);`
``
`  }`# end of else
``
`  }`# end of FOR_ALL_PATCHES
``
`  return Komar_mass;`
`}`


