## calculating BH_irreducible_mass. 
## note:
## obs->ret[0] = BH_irreducible_mass,
## obs->ret[1] = AH physical surface area.


# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);

`#include "obs_header.h"\n`

# return the irreducible mass of BH for cubed spherical coords
# this mass is proportional to the proper area of the apparent horizon.
`void obs_BH_irreducible_mass_CS(Observe_T *const obs);`
`void obs_BH_irreducible_mass_CS(Observe_T *const obs)`
`{`
`  Physics_T *const phys = obs->phys;`
`  Grid_T *const grid = mygrid(phys,"BH_around_IB");`
`  double A_AH = 0;`
`  Uint p;`
``
`  FOR_ALL_PATCHES(p,grid)`
`  {`
`    Patch_T *patch = grid->patch[p];`
`    Uint nn    = patch->nn;`
`    Uint ijk;`
``
`    ADD_FIELD(A_AH_integrand)`
``
`    double *g00 = alloc_double(nn);`
`    double *g01 = alloc_double(nn);`
`    double *g02 = alloc_double(nn);`
`    double *g11 = alloc_double(nn);`
`    double *g12 = alloc_double(nn);`
`    double *g22 = alloc_double(nn);`

Declare = 
{
 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);
}

# symmetries:
Symm[gConf(i,j)   = gConf(j,i)];

`{`# make it local variables
`    REALLOC_v_WRITE_v(A_AH_integrand)`

# populate inegrand and physical metric for the integration
`    for(ijk = 0; ijk < nn; ++ijk)`
`    {`
       psi4  = psi**4;
`      A_AH_integrand[ijk] = 1;`
`      /* metric */`
`      g00[ijk] = psi4*gConf_D0D0[ijk];`
`      g01[ijk] = psi4*gConf_D0D1[ijk];`
`      g02[ijk] = psi4*gConf_D0D2[ijk];`
`      g11[ijk] = psi4*gConf_D1D1[ijk];`
`      g12[ijk] = psi4*gConf_D1D2[ijk];`
`      g22[ijk] = psi4*gConf_D2D2[ijk];`
`    }`
`}`
``
`  DECLARE_FIELD(A_AH_integrand)`
`  Integration_T *I = init_integration();`
`  I->type = "Integral{f(x)dS},Spectral";`
`  I->Spectral->f = A_AH_integrand;`
`  I->g00 = g00;`
`  I->g01 = g01;`
`  I->g02 = g02;`
`  I->g11 = g11;`
`  I->g12 = g12;`
`  I->g22 = g22;`
`  I->Spectral->Z_surface = 1;`
`  I->Spectral->K         = 0;`

`  plan_integration(I);`
`  A_AH += execute_integration(I);`
``
`  free_integration(I);`
`  REMOVE_FIELD(A_AH_integrand)`
`  free(g00);`
`  free(g01);`
`  free(g02);`
`  free(g11);`
`  free(g12);`
`  free(g22);`

`  }`# end of FOR_ALL_PATCHES
``
`  obs->ret[0] = sqrt(A_AH/(16*M_PI));`
`  obs->ret[1] = A_AH;`
`}`

