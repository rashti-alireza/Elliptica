# use the definition of J ADM at S infinite then use Stokes theorem 
# and momentum constraints to cast the integration over S and V.
# note: integraion must not include matter.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);

C_arg1   = ;

`#include "obs_header.h"`
``
``
## note: surface patches and volume patches might have overlap
## thus, don't remove field if exists.
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) < 0) \`
         `  {ADD_AND_ALLOC_FIELD(name);} \`
         `  WRITE_v(name);`
``
``
`void obs_ADM_J_Stokes_SV_constraint(Observe_T *const obs);`
`void obs_ADM_J_Stokes_SV_constraint(Observe_T *const obs)`
`{`
`  Physics_T *const phys = obs->phys;`
`  struct items_S **adm  = obs->items;`
`  const Uint N      = obs->Nitems;`
`  const double x_cm = sysGetd("x_CM");`
`  const double y_cm = sysGetd("y_CM");`
`  const double z_cm = sysGetd("z_CM");`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`  Patch_T *patch = adm[p]->patch;`
`  Uint nn = patch->nn;`
`  Uint ijk;`

Declare = 
{
  # AConf^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # inverse conformal metric 
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal Christoffer symbol value
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);
 
 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # normal vector components
 (obj = Field,name = n, rank = U, none);

 # integrand J for S integral
 (obj = Field,name = obs__Js, rank = D, C_macro2);

 # integrand J for V integral
 (obj = Field,name = obs__Jv, rank = D, C_macro2);

 # x-x_cm
 (obj = Field,name = x_xCM, rank = U, none,C_arg1);

}
# symmetries:
Symm[AConfIJ(i,j)     = AConfIJ(j,i)];
Symm[gConf(i,j)       = gConf(j,i)];
Symm[igConf(i,j)      = igConf(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

# if S integral:
`  if (adm[p]->surface_integration_flg)`
`  {`
``
# populating the integrands:
`      const double *n_U0 = adm[p]->n_U0;`
`      const double *n_U1 = adm[p]->n_U1;`
`      const double *n_U2 = adm[p]->n_U2;`
``
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`

`      double x     = patch->node[ijk]->x[0];`
`      double y     = patch->node[ijk]->x[1];`
`      double z     = patch->node[ijk]->x[2];`
`      double x_xCM_U0 = x-x_cm;`
`      double x_xCM_U1 = y-y_cm;`
`      double x_xCM_U2 = z-z_cm;`

psi4   = psi**4;

psim2  = psi**-2;

# (K_ij - K g_ij)*n^j
Ps(-i) = n(-j)*\
(psim2*AConfIJ(ip,jp)*gConf(i,-ip)*gConf(j,-jp)-(2/3)*trK*psi4*gConf(i,j));

Js(-i) = EIJK(i,j,k)*x_xCM(-j)*Ps(-k);

Cpopulate[obs__Js = Js];

`      }`
`  }`

# if vol inegral:
`  else`
`  {`
# suffix '_' is added to prevent cpi error for duplicate variables
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`

`      double x     = patch->node[ijk]->x[0];`
`      double y     = patch->node[ijk]->x[1];`
`      double z     = patch->node[ijk]->x[2];`
`      double x_xCM_U0 = x-x_cm;`
`      double x_xCM_U1 = y-y_cm;`
`      double x_xCM_U2 = z-z_cm;`


psim2_     = psi**-2;
psi4_      = psi**4;
psim4_     = 1/psi4_;

dLnpsi(-i) = dpsi(i)/psi;


# \Gamma = \bar\Gamma + C
c(i,-j,-k)    = \
2*(dLnpsi(k)*KD(i,j)+dLnpsi(j)*KD(i,k)-dLnpsi(-l)*igConf(i,l)*gConf(j,k));
Symm[c(i,j,k) = c(i,k,j)];

Gamma(i,-j,-K) = c(i,j,k)+ChrisConf(i,j,k);
Symm[Gamma(i,j,k) = Gamma(i,k,j)];

# (K_i^k - K g_i^k)*Gamma^i_{kl}\delta^l_m =
# K_{ij} - K g_{ij})*gamma^{jk}*Gamma^i_{kl}\delta^l_m
mom(i,j) = \
psim2_*AConfIJ(ip,jp)*gConf(i,-ip)*gConf(j,-jp)-(2/3)*trK*psi4_*gConf(i,j);
Symm[mom(i,j)= mom(j,i)];

# rotational Killing vector at inf, not A is not tonsorial index
Phi(i,-A)    = EIJK(i,j,A)*x_xCM(-j);

dPhi(i,-A,l) =  EIJK(i,j,A)*KD(-j,l);

Dphi(i,-A,j) = dPhi(i,A,j)+Gamma(i,j,l)*Phi(-l,A);

Jv(-A)       = Dphi(i,A,j)*psim4_*igConf(-j,k)*mom(-i,-k);


Cpopulate[obs__Jv = Jv];

`      }`
`  }`

`  }` # end of for(p = 0; p < N; ++p)
``
## carry out the integration:
`  obs->ret[0] = obs_integral_SV`
`                 (obs,"obs__Js_D0","obs__Jv_D0",'+','+')/(8*M_PI);`

`  obs->ret[1] = obs_integral_SV`
`                 (obs,"obs__Js_D1","obs__Jv_D1",'+','+')/(8*M_PI);`

`  obs->ret[2] = obs_integral_SV`
`                 (obs,"obs__Js_D2","obs__Jv_D2",'+','+')/(8*M_PI);`
``
## remove fields
`  for(p = 0; p < N; ++p)`
`  {`
`    Patch_T *patch = adm[p]->patch;`
`    remove_field_regex(patch,"^obs__Js_D.$");`
`    remove_field_regex(patch,"^obs__Jv_D.$");`
`  }`
``
`}`



