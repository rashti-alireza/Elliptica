# populating integrand for P and J ADM of a single object
# note: in a binary system, there is not uniquest rule to 
# compute P and J quantities, the following recipe the best
# I could construct; Thus, should be not taken seriously.
# note: I intentionally lower index of Pn to have better agreement.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = add_and_get_field(name);
C_macro3 = declare_and_alloc_xi(name);

`#include "core_lib.h"`
`#include "physics_observe_lib.h"`
`#include "utilities_lib.h"`
`#include "manifold_lib.h"`
`#include "maths_general_lib.h"`
`#include "maths_calculus_lib.h"`
`#include "fields_lib.h"`
`#include "obs_header.h"`
``
`#define declare_and_alloc_xi(name) \`
	`  double *name = alloc_double(nn);`
``
`#define add_and_get_field(name) \`
         `  if (_Ind(#name) >= 0)\`# means if it exists already
         `  {DECLARE_FIELD(name);REMOVE_FIELD(name);}\`
         `  ADD_FIELD(name);REALLOC_v_WRITE_v(name);`
``
``
`void obs_populate_ADM_integrand_PdS_GdV_single(const Observe_T *const obs);`
`void obs_populate_ADM_integrand_PdS_GdV_single(const Observe_T *const obs)`
`{`
`  Physics_T *const phys = obs->phys;`
`  struct items_S **adm = obs->items;`
`  const Uint N = obs->Nitems;`
`  const double x_cm = Getd("x_CM");`
`  const double y_cm = Getd("y_CM");`
`  const double z_cm = Getd("z_CM");`
`  Uint p;`
``
`  for(p = 0; p < N; ++p)`
`  {`
`  Patch_T *patch = adm[p]->patch;`
`  Uint nn = patch->nn;`
`  Uint ijk;`

Declare = 
{
  # _A^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor derivative
 #(obj = Field,name = dpsi, rank = D, C_macro);

 # Christoffer symbol value
 #(obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # trKij
 (obj = Field,name = K, rank = 0, C_macro);

 # normal vector components
 (obj = Field,name = n, rank = U, none);

 # integrand P
 (obj = Field,name = ADM_integrand_P, rank = U, C_macro2);

 # integrand xiP
 (obj = Field,name = ADM_integrand_xiP, rank = U, C_macro2);

 # xi
 (obj = Field,name = xi, rank = U, C_macro3);
}
# symmetries:
Symm[AConfIJ(i,j)  = AConfIJ(j,i)];
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];
#Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

``
`   for(ijk = 0; ijk < nn; ++ijk)`
`   {`
`   double x    = patch->node[ijk]->x[0];`
`   double y    = patch->node[ijk]->x[1];`
`   double z    = patch->node[ijk]->x[2];`

`   xi_U0[ijk] = x-x_cm;`
`   xi_U1[ijk] = y-y_cm;`
`   xi_U2[ijk] = z-z_cm;`
`   }`
# populating the integrands:

`      const double *n_U0 = adm[p]->n_U0;`
`      const double *n_U1 = adm[p]->n_U1;`
`      const double *n_U2 = adm[p]->n_U2;`
`      for (ijk = 0; ijk < nn; ++ijk)`
`      {`
       psi4 = psi**4;
       psi6 = psi**6;

       # P^{ij} = psi^(-10) \bar A^{ij} -2/3 K psi^{-4} \bar\gamma^{ij}
       # P^{ij}*n^{k}*\gamma_{jk} => cancels psi^(-4) so don't write it:
       P(i,j) = AConfIJ(i,j)/psi6-(2/3)*K*igConf(i,j);
       Symm[P(i,j)  = P(j,i)];

# lower the index for better result:
       Pn(i)  = P(l,j)*n(k)*gConf(-j,-k)*gConf(-l,i)*psi4;
# the following won't give a good value for single BH!
#      Pn(i)  = P(l,j)*n(k)*gConf(-j,-k)*KD(-l,i);

       xiP(i) = EIJK(i,j,k)*xi(-j)*Pn(-k);

       Cpopulate[ADM_integrand_P   = Pn];
       Cpopulate[ADM_integrand_xiP = xiP];

`      }`
``
`  free(xi_U0);`
`  free(xi_U1);`
`  free(xi_U2);`
`  }`
`}`



