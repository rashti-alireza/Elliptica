# Jacobian equation for phi:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = Init_Jacobian(name);
C_macro4 = double CPI_name = d2f_dxdu_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro5 = double CPI_name = d3f_dx2du_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro6 = Free_Jacobian(name);

# C arguments for jacobian of derivative
C_arg = ;
C_arg2 = [ijk == lmn]; # for kd

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_T1_ddm_jacobian_eq_phi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_T1_ddm_jacobian_eq_phi(void *vp1,void *vp2)\n{`;

`  DDM_SCHUR_JACOBIAN_EQ_DECLARE`;
`  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */`;
#`  const double kd[2] = {0.,1.};/* Kronecker delta */`;
``
``
`  Header_Jacobian`


## define prefix for parameter
`  EQ_Def_Param_Prefix_Char`
`  EQ_Set_Prefix("NS")`
``
# declare for cpi
Declare = 
{
  # Kroneker delta
  #(obj = field, name = kd, rank = 0, none,C_arg2); 

 # Jphi 1st derivative
 (obj = Field,name = Jphi, rank = D, C_macro3,C_arg);

 # JJphi 2nd derivative
 (obj = Field,name = JJphi, rank = DD, C_macro3,C_arg);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro);

 # enthalpy 1st derivative
 (obj = Field,name = denthalpy, rank = D, C_macro);

 # rest mass density
 (obj = Field,name = rho0, rank = 0, C_macro);

 # rest mass density 1st derivative
 (obj = Field,name = drho0, rank = D, C_macro);

 # alphaPsi
 (obj = Field,name = alphaPsi, rank = 0, C_macro);

 # alphaPsi first derivative 
 (obj = Field,name = dalphaPsi, rank = D, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor 1st derivative
 (obj = Field,name = dpsi, rank = D, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal connections
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # rho0_center
 (obj = variable,name = rhoc, rank = 0, none);

 # small factor
 (obj = variable,name = e, rank = 0, none);

 # small factor2
 (obj = variable,name = att, rank = 0, none);

}

# symmetries for cpi
Symm[JJphi(i,j)       = JJphi(j,i)];
Symm[igConf(i,j)      = igConf(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];

`  const double rhoc = Pgetd(EQ_PrefixIt("rho0_center"));`
`  const double e    = Pgetd(EQ_PrefixIt("Eq_phi_polish"));`
`  const double att  = e*rhoc;`

##########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different names for new variables.
#
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# schur_B[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and schur_lmn = map[lmn] and
# ijk takes their values ON INNER POINTS
# of a patch, namley those collocated points that don't reach boundary of
# the patch, and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# schur_E[schur_ijk][schur_lmn] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and schur_lmn = map[lmn] and
# ijk takes their values ON INNER POINTS and lmn runs over INTERFACE points.
#
#    PRAGMATICALLY:
# Fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
##########################################################################


###############################################
####### B matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################

`  DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN\n`;

# principle part Jacobians
Declare = 
{
 # Jphi 1st derivative
 (obj = Field,name = Jphi, rank = D, C_macro4,C_arg);

 # JJphi 2nd derivative
 (obj = Field,name = JJphi, rank = DD, C_macro5,C_arg);
}

###
dLn_of_psi_b(i)       = dpsi(i)/psi;

dLn_of_alpha_b(i)     = dalphaPsi(i)/alphaPsi - dLn_of_psi_b(i);

dLn_of_enthalpy_b(i)  = denthalpy(i)/enthalpy;

polish_b              = att*((1-rho0/rhoc)**4);

t0_b = (rho0+polish_b)*igConf(-i,-l)*(JJphi(i,l));

t1_b = (rho0)*igConf(-i,-l)*(-ChrisConf(n,i,l)*Jphi(-n));

t2_b = igConf(-i,l)*Jphi(-l)*(drho0(i) + rho0*\
         (2*dLn_of_psi_b(i)+dLn_of_alpha_b(i)-dLn_of_enthalpy_b(i)));


Bpart_ = t0_b+t1_b+t2_b;

`  schur_B[schur_ijk][schur_lmn] = Bpart_;\n`;
`  DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE\n`;

###############################################
###### E matrix: J[ijk][lmn] in Jx = -F #######
###############################################

`  DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN\n`;

# principle part Jacobians
Declare = 
{
 # Jphi 1st derivative
 (obj = Field,name = Jphi, rank = D, C_macro4,C_arg);

 # JJphi 2nd derivative
 (obj = Field,name = JJphi, rank = DD, C_macro5,C_arg);
}


dLn_of_psi_e(i)       = dpsi(i)/psi;

dLn_of_alpha_e(i)     = dalphaPsi(i)/alphaPsi - dLn_of_psi_e(i);

dLn_of_enthalpy_e(i)  = denthalpy(i)/enthalpy;

polish_e              = att*((1-rho0/rhoc)**4);

t0_e = (rho0+polish_e)*igConf(-i,-l)*(JJphi(i,l));

t1_e = (rho0)*igConf(-i,-l)*(-ChrisConf(n,i,l)*Jphi(-n));

t2_e = igConf(-i,l)*Jphi(-l)*(drho0(i) + rho0*\
         (2*dLn_of_psi_e(i)+dLn_of_alpha_e(i)-dLn_of_enthalpy_e(i)));

Epart_ = t0_e+t1_e+t2_e;


`  schur_Et[schur_lmn][schur_ijk] = Epart_;\n`;
`  DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE\n`;

###############################################

## demanding phi = 0 at the center of NS
`  if(patch->grid->kind != Grid_SplitCubedSpherical_BHNS &&`
`     patch->grid->kind != Grid_SplitCubedSpherical_NSNS &&`
`     patch->grid->kind != Grid_SplitCubedSpherical_SNS)`
`    Error0("For this grid you need to figure out where to set phi = 0.\n");`
``
``
`  if(IsItCovering(patch,"left_central_box") || IsItCovering(patch,"right_central_box"))`
`  {`
`    const double Att_Con_Num = 1E-5;`
`    const double NS_center[3] = {Pgetd(EQ_PrefixIt("center_x")),`
`                                 Pgetd(EQ_PrefixIt("center_y")),`
`                                 Pgetd(EQ_PrefixIt("center_z"))};`
`    double X[3] = {0};`
``
`    if (X_of_x(X,NS_center,patch))`
`    {`
`      fdInterp_dfs_T *const dInterp_df = get_dInterp_df(patch,0,"none");`
`      const Uint nn = patch->nn;`
`      double *d_df = alloc_double(nn);`
`      for (ijk = 0; ijk < nn; ++ijk)`
`        d_df[ijk] = dInterp_df(patch,X,ijk,0);`
``
       ## B part:
`      DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN`
`      	 schur_B[schur_ijk][schur_lmn] += Att_Con_Num*d_df[lmn];` # for eq: phi = 0
`      DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE`
``
       ## E part:
`      DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN`
`        schur_Et[schur_lmn][schur_ijk] += Att_Con_Num*d_df[lmn];`
`      DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE`
`      free(d_df);`
`    }`
`  }`
``
# principle part Jacobians
Declare = 
{
 # Jphi 1st derivative
 (obj = Field,name = Jphi, rank = D, C_macro6,C_arg);

 # JJphi 2nd derivative
 (obj = Field,name = JJphi, rank = DD, C_macro6,C_arg);
}

`  Footer_Jacobian`
``
`  return 0;`;
`}`;

