# Jacobian for alphaPsi BC equation: 
# Neumann B.C. :
# \frac{\partial \alpha}{\partial r} = 0.


# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = Init_Jacobian(name);
C_macro4 = double CPI_name = d2f_dxdu_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro5 = double CPI_name = d3f_dx2du_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro6 = Free_Jacobian(name);

# C arguments for jacobian of derivatives
C_arg  = ;
C_arg1 = ;
C_arg2 = [ijk == lmn]; # for kd

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_exc_T2_ddm_jacobian_bc_alphaPsi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_exc_T2_ddm_jacobian_bc_alphaPsi(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, B, E_Trans, node, I0, Ni, Nj, K0, Nk, i,j,k.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_JACOBIAN_BC_DECLARE`;
`  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */`;
`  const double kd[2] = {0.,1.};/* Kronecker delta */`;
``
`  Header_Jacobian`


# declare for Cpi
Declare = 
{
 # Jacobian first derivative 
 (obj = Field,name = JalphaPsi, rank = D, C_arg,C_macro3);

  # conformal factor
 #(obj = Field,name = psi, rank = 0, C_macro);

 # dconformal factor
 #(obj = Field,name = dpsi, rank = D, C_macro);

 # coords from BH's center
 #(obj = Field,name = x, rank = U, none,C_arg1);

 # Kroneker delta
 (obj = field, name = kd, rank = 0, none,C_arg2);

 # normal vector at the horizon
 (obj = Field,name = bh_sConf, rank = U, C_macro);

}

# symmetries for Cpi


###########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different name for new variables.
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# B[schur_ijk][schur_c] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and schur_c = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS of a patch, 
# and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# E[schur_ijk][schur_c] = d[F(f(ijk))]/df(lmn), where schur_ijk = map[ijk], and schur_c = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS and lmn runs over INTERFACE points.
#
#    PRAGMATICALLY:
#  If you have Dirichlet B.C. for outer-boundary (inner-boundary), 
# only fill B matrix with the jacobian of the B.C. equation, 
# and for E matrix put outerB_Epart = 0 (innerB_Epart = 0).
#  If you have Neumann B.C. or any B.C. that has derivative in it
# fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write two duplicated equations for each part, 
# and if you're using interim variables use different names for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
###########################################################################


# OUTER BOUNDARY LIKE INFINITY
`  if (patch->outerB)`;
`  {`;


###############################################
####### B matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################
`  DDM_SCHUR_JACOBIAN_BC_Bpart_OPEN\n`;
outerB_Bpart = kd;


`  B[schur_ijk][schur_c] = outerB_Bpart;\n`;
`  DDM_SCHUR_JACOBIAN_BC_Bpart_CLOSE\n`;
###############################################


###############################################
###### E matrix: J[ijk][lmn] in Jx = -F #######
###############################################
`  DDM_SCHUR_JACOBIAN_BC_Epart_OPEN\n`;
outerB_Epart = 0;


`  E_Trans[schur_c][schur_ijk] = outerB_Epart;\n`;
`  DDM_SCHUR_JACOBIAN_BC_Epart_CLOSE`;
###############################################


`  }/* end of if (patch->outerB) */`;

# INNER BOUNDARY LIKE BLACK HOLE HORIZON #
`  else if (patch->innerB)`;
`  {`;

###############################################
####### B matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################
`  DDM_SCHUR_JACOBIAN_BC_Bpart_OPEN\n`;

Declare = 
{
 # Jacobian first derivative 
 (obj = Field,name = JalphaPsi, rank = D, C_arg,C_macro4);
}

innerB_Bpart = bh_sConf(i)*JalphaPsi(-i);


`  B[schur_ijk][schur_c] = innerB_Bpart;\n`;
`  DDM_SCHUR_JACOBIAN_BC_Bpart_CLOSE\n`;
###############################################


###############################################
####### E matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################
`  DDM_SCHUR_JACOBIAN_BC_Epart_OPEN\n`;

Declare = 
{
 # Jacobian first derivative 
 (obj = Field,name = JalphaPsi, rank = D, C_arg,C_macro4);
}

innerB_Epart = bh_sConf(i)*JalphaPsi(-i);


`  E_Trans[schur_c][schur_ijk] = innerB_Epart;\n`;
`  DDM_SCHUR_JACOBIAN_BC_Epart_CLOSE\n`;
###############################################


`  }/* end of else if (patch->innerB) */\n`;
``
Declare = 
{
 # Jacobian first derivative 
 (obj = Field,name = JalphaPsi, rank = D, C_arg,C_macro6);
}

`  Footer_Jacobian`
``
`  return 0;`;
`}`;

