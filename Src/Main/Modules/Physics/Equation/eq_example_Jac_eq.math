# An example for the Jacobian of an eq.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

# C macors
C_macro1 = Init_Jacobian(CPI_name);
C_macro2 = double CPI_name = d2f_dxdu_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro3 = double CPI_name = d3f_dx2du_Jacobian(patch,CPI_index,ijk,lmn,CPI_name);;
C_macro4 = Free_Jacobian(name);
C_macro5 = ...;

# C arguments for jacobian of derivatives
C_arg1 = ;
C_arg2 = ....;

## C func

`void *eq_XCTS_curve_T3_ddm_jacobian_eq_ex(void *vp1,void *vp2);`
`void *eq_XCTS_curve_T3_ddm_jacobian_eq_ex(void *vp1,void *vp2)`
`{`

## init vars
`  DDM_SCHUR_JACOBIAN_EQ_DECLARE`;
`  Uint ijk,lmn;/* for Jacobian entries J[ijk][lmn] */`;
``
## init Jacobian
`  Header_Jacobian`

# declare for Cpi
Declare = 
{
 # declare first order jacobian, e.g.
 (obj = Field,name = Jex, rank = D, C_macro1,C_arg);

 # declare second order jacobian, e.g.
 (obj = Field,name = JJex, rank = DD, C_macro1,C_arg);

...
}


###########################################################################
#    NOTE1: There are different calculation parts, in each part use 
# different name for new variables otherwise the Cpi gives warnings.
#    NOTE2: In Schur domain decomposition method we need two types of
# matrices for Jacobian of Newton-Raphson scheme, matrix B and matrix E. 
# Let's say Jx = -F in Newton-Raphson scheme; then,
# B[schur_r][schur_c] = d[F(f(ijk))]/df(lmn), where schur_r = map[ijk], and schur_c = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS of a patch, 
# and lmn runs over ALL BUT the interface points (interface
# points are those located between two patches).
# E[schur_r][schur_c] = d[F(f(ijk))]/df(lmn), where schur_r = map[ijk], and schur_c = map[lmn] and
# ijk takes their values ON BOUNDARY POINTS and lmn runs over INTERFACE points.
# For more info look at the first paper of Elliptica regarding Schur domain
# decomposition and also other real case equations in this dir.
#
#    PRAGMATICALLY:
#  If you have Dirichlet B.C. for outer-boundary (inner-boundary), 
# only fill B matrix with the jacobian of the B.C. equation, 
# and for E matrix put outerB_Epart = 0 (innerB_Epart = 0).
#  If you have Neumann B.C. or any B.C. that has derivative in it
# fill both B matrix and E matrix part WITH THE SAME EQUATION, you just
# need to write the same equations for each part.
#
#    NOTE3: For each part which doesn't exist, let it be 0.
###########################################################################



###############################################
####### B matrix: J[ijk][lmn] in Jx = -F ###### 
###############################################
`  DDM_SCHUR_JACOBIAN_EQ_Bpart_OPEN`;

Declare = 
{
 # populate 1st order Jacobian
 (obj = Field,name = Jex, rank = D, C_macro2,C_arg);

 # populate 2nd order Jacobian
 (obj = Field,name = JJex, rank = DD, C_macro3,C_arg);
}

## set values:
Bpart = ...;


`  B[schur_r][schur_c] = Bpart;`;
`  DDM_SCHUR_JACOBIAN_EQ_Bpart_CLOSE`;
###############################################


###############################################
###### E matrix: J[ijk][lmn] in Jx = -F #######
###############################################
`  DDM_SCHUR_JACOBIAN_EQ_Epart_OPEN`;

Declare = 
{
 # populate 1st order Jacobian
 (obj = Field,name = Jex, rank = D, C_macro2,C_arg);

 # populate 2nd order Jacobian
 (obj = Field,name = JJex, rank = DD, C_macro3,C_arg);
}

## set values:
Epart = ...;


`  E_Trans[schur_c][schur_r] = Epart;`;
`  DDM_SCHUR_JACOBIAN_EQ_Epart_CLOSE`;
###############################################

``
Declare = 
{
 # free 1st order jacobian
 (obj = Field,name = Jex, rank = D, C_macro4, C_arg);

 # free 2nd order derivative
 (obj = Field,name = JJex, rank = DD, C_macro4,C_arg);
}

`  Footer_Jacobian`
``
`  return 0;`;
`}`;

