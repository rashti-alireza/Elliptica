# phi BC equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_arg    = ;

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_T3_ddm_bc_phi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_T3_ddm_bc_phi(void *vp1,void *vp2)\n{`;

`  DDM_SCHUR_BC_DECLARE`;
`  Uint ijk;/* node index */`;

# declare for Cpi
Declare = 
{

 # dphi 1st derivative
 (obj = Field,name = dphi, rank = D, C_macro);

 # spin of NS
 (obj = Field,name = W, rank = U, C_macro);

 # enthalpy
 #(obj = Field,name = enthalpy, rank = 0, C_macro);

 # rest mass density 1st derivative
 #(obj = Field,name = drho0, rank = D, C_macro);

 # first component of fluid velocity
 (obj = Field,name = u0, rank = 0, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # shifts
 (obj = Field,name = beta, rank = U, C_macro);

 # conformal metric inverse
 #(obj = Field,name = igConf, rank = UU, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # unnormalized normal
 (obj = Field,name = n, rank = U, none,C_arg);

}

# symmetries for Cpi:
#Symm[igConf(i,j) = igConf(j,i)];
Symm[gConf(i,j) = gConf(j,i)];

# NOTE: write each equation in terms of ijk point, and if there is no
# outer boundary or inner boundary equation, let it be 0.

# OUTER BOUNDARY, NS surface #
`  if (patch->outerB)/* at outer boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# calculate unnormalized normal:
` double n_U0 = dq2_dq1(patch,_c_,_x_,ijk);`
` double n_U1 = dq2_dq1(patch,_c_,_y_,ijk);`
` double n_U2 = dq2_dq1(patch,_c_,_z_,ijk);`

Norm = gConf(i,j)*n(-i)*n(-j);

s(i) = n(i)/(Norm**0.5);

psi4 = psi**4;

# bc equation for outer boundary at ijk point:
# NOTE: enthalpy assumed be 1 on the surface.
outerB_F = s(i)*dphi(-i) + \
	   psi4*gConf(-i,-j)*s(j)*(W(i)-u0*beta(i));


`  F[map[ijk]] = outerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of if (patch->outerB) */`;

# INNER BOUNDARY LIKE BLACK HOLE HORIZON #
`  else if (patch->innerB)/* at inner boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;


# bc equation for inner boundary at ijk point:
innerB_F = 0;


`  F[map[ijk]] = innerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of else if (patch->innerB) */`;

`  return 0;`;
`}`;

