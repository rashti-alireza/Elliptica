# equation: phi, irrational piece of fluid velocity
# curve + Wolfgang's eq.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_T1_ddm_eq_phi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_T1_ddm_eq_phi(void *vp1,void *vp2)\n{`;

`  DDM_SCHUR_EQ_DECLARE`;
`  Uint ijk;/* node index */`;
``
## define prefix for parameter
`  EQ_Def_Param_Prefix_Char`
`  EQ_Set_Prefix("NS")`
``
# declare for Cpi:
Declare = 
{

 # phi
 #(obj = Field,name = phi, rank = 0, C_macro);

 # dphi 1st derivative
 (obj = Field,name = dphi, rank = D, C_macro);

 # ddphi 2nd derivative
 (obj = Field,name = ddphi, rank = DD, C_macro);

 # spin of NS
 (obj = Field,name = W, rank = U, C_macro);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro);

 # enthalpy 1st derivative
 (obj = Field,name = denthalpy, rank = D, C_macro);

 # rest mass density
 (obj = Field,name = rho0, rank = 0, C_macro);

 # rest mass density 1st derivative
 (obj = Field,name = drho0, rank = D, C_macro);

 # first component of fluid velocity
 (obj = Field,name = u0, rank = 0, C_macro);

 # first component of fluid velocity first derivative
 (obj = Field,name = du0, rank = D, C_macro);

 # alphaPsi
 (obj = Field,name = alphaPsi, rank = 0, C_macro);

 # alphaPsi first derivative 
 (obj = Field,name = dalphaPsi, rank = D, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor 1st derivative
 (obj = Field,name = dpsi, rank = D, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # shifts
 (obj = Field,name = beta, rank = U, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal connections
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);

 # rho0_center
 (obj = variable,name = rhoc, rank = 0, none);

 # small factor
 (obj = variable,name = e, rank = 0, none);

 # small factor2
 (obj = variable,name = att, rank = 0, none);

}

# symmetries for Cpi:
Symm[igConf(i,j)      = igConf(j,i)];
Symm[ChrisConf(i,j,k) = ChrisConf(i,k,j)];
Symm[ddphi(i,j)       = ddphi(j,i)];

`  const double rhoc = Pgetd(EQ_PrefixIt("rho0_center"));`
`  const double e    = Pgetd(EQ_PrefixIt("Eq_phi_polish"));`
`  const double att  = e*rhoc;`

##########################################################################
# NOTE: In domain decomposition method n is relabed from point ijk.
# In fact ijk is mapped to point n, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################

`  DDM_SCHUR_EQ_OPEN\n`;

# write the equation below at ijk point:

dLn_of_psi(i)       = dpsi(i)/psi;

dLn_of_alpha(i)     = dalphaPsi(i)/alphaPsi - dLn_of_psi(i);

dLn_of_enthalpy(i)  = denthalpy(i)/enthalpy;

dLn_of_u0(i)        = du0(i)/u0;

psi4                = psi**4;

alpha               = alphaPsi/psi;

polish              = att*((1-rho0/rhoc)**4);

hxu0xpsi4           = enthalpy * u0 * psi4;

# using helical Killing vector: arXiv:0804.3787v3[gr-qc]
DiBi = alpha *trK;


t1    = igConf(-i,-l)*(ddphi(i,l)-ChrisConf(n,i,l)*dphi(-n));

t2    = (2*dLn_of_psi(-i)+dLn_of_alpha(-i)-dLn_of_enthalpy(-i))*igConf(i,l)*dphi(-l);

t3    = (6*dLn_of_psi(i)+dLn_of_alpha(i)-dLn_of_enthalpy(i)+ChrisConf(l,lp,i)*KD(-l,-lp))*psi4*W(-i);

t4    = -hxu0xpsi4 * (dLn_of_alpha(i)+dLn_of_u0(i))*beta(-i);

t5    = -hxu0xpsi4 * (DiBi);

t6(i) = (igConf(i,l)*dphi(-l)+psi4*W(i)-hxu0xpsi4*beta(i));

F_eq  = polish*t1+rho0*(t1+t2+t3+t4+t5)+drho0(-i)*t6(i);


`  F[schur_ijk] = F_eq;\n`;# Jx = -F in Newton-Raphson scheme
`  DDM_SCHUR_EQ_CLOSE\n`;

## put phi zero at a point in the center of NS

`  if(patch->grid->kind != Grid_SplitCubedSpherical_BHNS &&`
`     patch->grid->kind != Grid_SplitCubedSpherical_NSNS &&`
`     patch->grid->kind != Grid_SplitCubedSpherical_SNS)`
`    Error0("For this grid you need to figure out where to set phi = 0.\n");`
``
``
`  if(IsItCovering(patch,"left_central_box") || IsItCovering(patch,"right_central_box"))`
`  {`
`    const double Att_Con_Num = 1E-5;`
`    const double NS_center[3] = {Pgetd(EQ_PrefixIt("center_x")),`
`                                 Pgetd(EQ_PrefixIt("center_y")),`
`                                 Pgetd(EQ_PrefixIt("center_z"))};`
`    double interp;`
`    double X[3] = {0};`
``
     # if this patch covers NS center
`    if (X_of_x(X,NS_center,patch))`
`    {`
`      Interpolation_T *interp_phi0 = init_interpolation();`
`      interp_phi0->field = patch->fields[Ind("phi")];`
`      interp_phi0->X = X[0];`
`      interp_phi0->Y = X[1];`
`      interp_phi0->Z = X[2];`
`      interp_phi0->XYZ_dir_flag = 1;`
`      plan_interpolation(interp_phi0);`
`      interp = execute_interpolation(interp_phi0);`
`      free_interpolation(interp_phi0);`
`      DDM_SCHUR_EQ_OPEN`
`	 F[schur_ijk] += Att_Con_Num*interp;` # phi = 0 at the center of NS
`      DDM_SCHUR_EQ_CLOSE`
`   }`
`   `
`  }`

`  return 0;`;
`}`;

