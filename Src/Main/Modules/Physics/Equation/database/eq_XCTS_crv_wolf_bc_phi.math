# phi BC equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = READ_v_IF_IN_NS(name);

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;

`void *eq_bc_phi(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, map, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_BC_DECLARE`;
`  Uint ijk;/* node index */`;

# declare for Cpi
Declare = 
{

 # dphi 1st derivative
 (obj = Field,name = dphi, rank = D, C_macro3);

 # spin of NS
 (obj = Field,name = W, rank = U, C_macro3);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro3);

 # rest mass density 1st derivative
 (obj = Field,name = drho0, rank = D, C_macro3);

 # first component of fluid velocity
 (obj = Field,name = u0, rank = 0, C_macro3);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # shifts
 (obj = Field,name = beta, rank = U, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

}

# symmetries for Cpi:
Symm[igConf(i,j)   = igConf(j,i)];

# NOTE: write each equation in terms of ijk point, and if there is no
# outer boundary or inner boundary equation, let it be 0.

# OUTER BOUNDARY LIKE INFINITY #
`  if (patch->outerB)/* at outer boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# bc equation for outer boundary at ijk point:
outerB_F = \
(psi**-4)*igConf(i,l)*dphi(-l)*drho0(-i)+W(i)*drho0(-i)-enthalpy*u0*beta(i)*drho0(-i);


`  F[map[ijk]] = outerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of if (patch->outerB) */`;

# INNER BOUNDARY LIKE BLACK HOLE HORIZON #
`  else if (patch->innerB)/* at inner boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;


# bc equation for inner boundary at ijk point:
innerB_F = 0;


`  F[map[ijk]] = innerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of else if (patch->innerB) */`;

`  return 0;`;
`}`;

