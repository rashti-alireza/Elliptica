# equation: Beta_U1

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro4 = READ_v_UNUSED(name);

# main function:
`#include "bbn_headers.h"`;
`#include "maths_equation_solvings_lib.h"`;
`#include "bbn_XCTS_equations_lib.h"\n\n`;

`void *bbn_eq_Beta_U1(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_EQ_DECLARE`;
`  Uint ijk;/* node index */`;

# declare for Cpi:
Declare = 
{
 # _A^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro4);

 # partial derivative of _A^{ij}
 (obj = Field,name = dAConfIJ, rank = UUD, C_macro4);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # alpha*psi
 (obj = Field,name = alphaPsi, rank = 0, C_macro);
 
 # trKij first derivative
 (obj = Field,name = dtrK, rank = D, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro4);

 # conformal connections
 (obj = Field,name = ChrisConf, rank = UDD, C_macro4);

 # conformal momentum current
 (obj = Field,name = JConf, rank = U, C_macro4);

}

# symmetries for Cpi:
Symm[dAConfIJ(i,j,k) = dAConfIJ(j,i,k)];
Symm[AConfIJ(i,j)    = AConfIJ(j,i)];
Symm[igConf(i,j)    = igConf(j,i)];
Symm[ChrisConf(i,j,k)   = ChrisConf(i,k,j)];


##########################################################################
# NOTE: In domain decomposition method n is relabed from point ijk.
# In fact ijk is mapped to point n, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################

`  DDM_SCHUR_EQ_OPEN\n`;

#alphabar = alphaPsi*psi**(-7);# alpha * psi^-6 => large error for psi < 1

F00(i) = psi**(-3)*(\
 dAConfIJ(i,j,jp)*KD(-j,-jp)+\
ChrisConf(i,j,l)*AConfIJ(-l,-j)+\
ChrisConf(j,jp,l)*AConfIJ(i,-l)*KD(-j,-jp));

F0(i) = psi**(-4)*F00(i);

F1(i) = -2/3*igConf(i,j)*dtrK(-j)/psi -8*pi*(psi**-3)*JConf(i);

F_eq(i) = 2*alphaPsi*(F0(i)+F1(i));

`  F[n] = F_eq_U1;\n`;# Jx = -F in Newton-Raphson scheme
`  DDM_SCHUR_EQ_CLOSE\n`;

`  return 0;`;
`}`;

# TO OPTIMIZE the function one can trim off all redunted components:
Command["sed -i -E '/^\s{2}double \w+_U[02] =/,/;$/d'"];
