# equation: psi (conformal factor)

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_exc_T1_ddm_eq_psi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_exc_T1_ddm_eq_psi(void *vp1,void *vp2)\n{`;

`  DDM_SCHUR_EQ_DECLARE`;
`  Uint ijk;/* node index */`;

# declare for Cpi:
Declare = 
{

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro);

 # conformal factor second derivative 
 (obj = Field,name = ddpsi, rank = DD, C_macro);

 # Ricci
 (obj = Field,name = trRicciConf, rank = 0, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # AConf_{ij}*AConf^{ij}
 (obj = Field,name = AConfIJ2, rank = 0, C_macro);

 # total conformal energy density
 (obj = Field,name = EConf, rank = 0, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # conformal connections
 (obj = Field,name = ChrisConf, rank = UDD, C_macro);

}

# symmetries for Cpi:
Symm[ddpsi(i,j)     = ddpsi(j,i)];
Symm[igConf(i,j)   = igConf(j,i)];
Symm[ChrisConf(i,j,k)  = ChrisConf(i,k,j)];


##########################################################################
# NOTE: In domain decomposition method, schur_ijk is relabed from point ijk.
# In fact ijk is mapped to point schur_ijk, for relabeling purposes of
# domain decompostion which is encapsulated in macro DDM_SCHUR_EQ_OPEN.
# The bottom line is JUST simply WRITE the equation FOR F_eq 
# at Newton-Raphson scheme (Jx = -F_eq) in TERMS OF ijk POINT.
##########################################################################

`  DDM_SCHUR_EQ_OPEN\n`;

# write the equation below at ijk point:
psi4 = psi**4;
aij2 = AConfIJ2/psi4;
F_eq = igConf(i,j)*ddpsi(-i,-j) \
     - igConf(-i,-j)*ChrisConf(l,i,j)*dpsi(-l)\
     - psi*trRicciConf/8 - psi4*psi*(trK**2)/12 + aij2/(8*psi**3) + 2*pi*EConf/psi;

`  schur_F[schur_ijk] = F_eq;\n`;# Jx = -F in Newton-Raphson scheme
`  DDM_SCHUR_EQ_CLOSE\n`;

`  return 0;`;
`}`;

