# psi (conformal factor) BC equation:

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
C_macro3 = READ_v_UNUSED(name);

# main function:
`#include "eq_header.h"`;
`#include "maths_equation_solvings_lib.h"`;
``
`void *eq_XCTS_curve_exc_KS_ddm_bc_psi(void *vp1,void *vp2);`;
`void *eq_XCTS_curve_exc_KS_ddm_bc_psi(void *vp1,void *vp2)\n{`;

# NOTE: THE FOLLOWING MACRO DECLARES AND DEFINES THE FOLLOWING VARIABLES:
# patch, S, map, F, node, N, n.
# THUS, DO NOT DEFINE THEM AGAIN.
`  DDM_SCHUR_BC_DECLARE`;
`  Uint ijk;/* node index */`;


# declare for Cpi
Declare = 
{
 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro);

 # _A^{ij}
 (obj = Field,name = AConfIJ, rank = UU, C_macro);

 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal connections
 (obj = Field,name = ChrisConf, rank = UDD, C_macro3);

 # normal vector at the horizon
 (obj = Field,name = bh_sConf, rank = U, C_macro);

 # first derivative of normal vector at the horizon
 (obj = Field,name = dbh_sConf, rank = UD, C_macro3);
}

# symmetries for Cpi
Symm[AConfIJ(i,j)   = AConfIJ(j,i)];
Symm[gConf(i,j)    = gConf(j,i)];
Symm[ChrisConf(i,j,k)  = ChrisConf(i,k,j)];

# NOTE: write each equation in terms of ijk point, and if there is no
# outer boundary or inner boundary equation, let it be 0.

# OUTER BOUNDARY LIKE INFINITY #
`  if (patch->outerB)/* at outer boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# bc equation for outer boundary at ijk point:
outerB_F = psi-1;


`  F[map[ijk]] = outerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;
`  }/* end of if (patch->outerB) */`;

# INNER BOUNDARY LIKE BLACK HOLE HORIZON #
`  else if (patch->innerB)/* at inner boundary */`;
`  {`;
`  DDM_SCHUR_BC_OPEN\n`;

# bc equation for inner boundary at ijk point:

_DiHSi   = (dbh_sConf(j,i) + ChrisConf(j,i,l)*bh_sConf(-l))*KD(-j,-i);
innerB_F = bh_sConf(i)*dpsi(-i) + \
           psi*_DiHSi/4 - trK*(psi**3)/6 +\
           (psi**-3)*AConfIJ(i,j)*gConf(-i,-l)*gConf(-j,-m)*bh_sConf(l)*bh_sConf(m)/4;

`  F[map[ijk]] = innerB_F;\n`;
`  DDM_SCHUR_BC_CLOSE`;

`  }/* end of else if (patch->innerB) */`;


`  return 0;`;
`}`;

