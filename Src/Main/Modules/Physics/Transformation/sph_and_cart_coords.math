# transform from spherical coords to cartesian coords and vise versa

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point=;
C_arg=;

`#include "core_lib.h"`
`#include "maths_general_lib.h"`
`#include "maths_linear_algebra_lib.h"`
`#include "physics_transformation_lib.h"`
``
``
`/* performing coords transformation spherical to Cartesian and vice versa`
`// the given vector at each point is 'in' and its transformed is 'out'. */`
`void sphNcar_transformation(Transformation_T *const t,const double *const in,double *const out);`
`void sphNcar_transformation(Transformation_T *const t,const double *const in,double *const out)`
`{`
`  const double r  = t->sphNcar->r;`
`  const double th = t->sphNcar->th;`
`  const double ph = t->sphNcar->ph;`
`  const double v_U0 = in[0];`
`  const double v_U1 = in[1];`
`  const double v_U2 = in[2];`
``
Declare = 
{
 ## input
 (obj = Field,name = v, rank = U, none,C_arg);

 # transformation from d(x,y,z)/d(r,th,ph)
 (obj = Field,name = dc_ds, rank = DD, none,C_arg);

 # transformation from d(r,th,ph)/d(x,y,z)
 (obj = Field,name = ds_dc, rank = UU, none,C_arg);
}

## d(x,y,z)/d(r,th,ph):

`const double dc_ds_D0D0 = sin(th)*cos(ph);`
`const double dc_ds_D0D1 = r*cos(th)*cos(ph);`
`const double dc_ds_D0D2 = -r*sin(th)*sin(ph);`

`const double dc_ds_D1D0 = sin(th)*sin(ph);`
`const double dc_ds_D1D1 = r*cos(th)*sin(ph);`
`const double dc_ds_D1D2 = r*sin(th)*cos(ph);`

`const double dc_ds_D2D0 = cos(th);`
`const double dc_ds_D2D1 = -r*sin(th);`
`const double dc_ds_D2D2 = 0.;`


## cartesian to spherical
`if (!t->sphNcar->active)`
`{`
``
### d(r,th,ph)/d(x,y,z)
`double ds_dc_U0U0 = 0.;`
`double ds_dc_U0U1 = 0.;`
`double ds_dc_U0U2 = 0.;`
`double ds_dc_U1U0 = 0.;`
`double ds_dc_U1U1 = 0.;`
`double ds_dc_U1U2 = 0.;`
`double ds_dc_U2U0 = 0.;`
`double ds_dc_U2U1 = 0.;`
`double ds_dc_U2U2 = 0.;`
``
`Matrix_Inverse_3x3_General_Var(dc_ds,D,ds_dc,U);`
``
  ## transform
 u1(i)  = ds_dc(i,j)*v(-j);
`out[0] = u1_U0;`
`out[1] = u1_U1;`
`out[2] = u1_U2;`
`}`

## spherical to Cartesian:
`else`
`{`
``
  ## transform
  u2(i)  = dc_ds(-i,-j)*v(j);
`out[0] = u2_U0;`
`out[1] = u2_U1;`
`out[2] = u2_U2;`
`}`

`}`
