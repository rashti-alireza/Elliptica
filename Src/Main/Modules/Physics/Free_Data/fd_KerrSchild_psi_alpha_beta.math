## computing psi, alpha and beta for Kerr-Schild analytically

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro1  = READ_v_STEM(name,ig);
C_macro2  = REALLOC_v_WRITE_v_STEM(name,Psi);
C_macro3  = REALLOC_v_WRITE_v_STEM(name,Alpha);
C_macro4  = REALLOC_v_WRITE_v_STEM(name,Beta);
C_arg     = ;

`#include "fd_header.h"`
`#include "fd_KerrSchild_header.h"`
``
``
`#undef x`
`#undef y`
`#undef z`
``
`#define KS_func_pass_args_sed KS_func_pass_args_macro`
``
`#define KS_set_args \`
`  struct Analytic_Func_Arg_S farg[1];\`
`  farg->x = x;\`
`  farg->y = y;\`
`  farg->z = z;\`
`  farg->X = fd_ks_X KS_func_pass_args_macro;\`
`  farg->Y = fd_ks_Y KS_func_pass_args_macro;\`
`  farg->Z = fd_ks_Z KS_func_pass_args_macro;\`
`  farg->R = fd_ks_R KS_func_pass_args_macro;\`
`  farg->dX_D0 = fd_ks_dX_D0 KS_func_pass_args_sed;\`
`  farg->dX_D1 = fd_ks_dX_D1 KS_func_pass_args_sed;\`
`  farg->dX_D2 = fd_ks_dX_D2 KS_func_pass_args_sed;\`
`  farg->dY_D0 = fd_ks_dY_D0 KS_func_pass_args_sed;\`
`  farg->dY_D1 = fd_ks_dY_D1 KS_func_pass_args_sed;\`
`  farg->dY_D2 = fd_ks_dY_D2 KS_func_pass_args_sed;\`
`  farg->dZ_D0 = fd_ks_dZ_D0 KS_func_pass_args_sed;\`
`  farg->dZ_D1 = fd_ks_dZ_D1 KS_func_pass_args_sed;\`
`  farg->dZ_D2 = fd_ks_dZ_D2 KS_func_pass_args_sed;`
``
``

`void fd_KerrSchild_psi_alpha_beta(Patch_T *const patch,`
` const double BH_center_x,const double BH_center_y,`
` const double BH_center_z,const char *const ig,`
` const char *const Psi,const char *const Alpha,`
` const char *const Beta);`
``
``
`void fd_KerrSchild_psi_alpha_beta(Patch_T *const patch,`
` const double BH_center_x,const double BH_center_y,`
` const double BH_center_z,const char *const ig,`
` const char *const Psi,const char *const Alpha,`
` const char *const Beta)`
`{`

Declare =
{
  # ig
  (obj = Field,name = ig, rank = UU, C_macro1);

  # psi
  (obj = Field,name = psi, rank = 0, C_macro2);

  # alpha
  (obj = Field,name = alpha, rank = 0, C_macro3);

  # beta
  (obj = Field,name = beta, rank = U, C_macro4);

  # beta
  (obj = Field,name = betaD, rank = D, none,C_arg);

}

Symm[ig(i,j)      = ig(j,i)];

## populate beta_i and alpha

`FOR_ALL_ijk`
`{`
`  double x,y,z;`
`  x = patch->node[ijk]->x[0]-BH_center_x;`
`  y = patch->node[ijk]->x[1]-BH_center_y;`
`  z = patch->node[ijk]->x[2]-BH_center_z;`
`  KS_set_args`
``
`  double betaD_D0 = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k0(x, y, z);`
`  double betaD_D1 = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k1(x, y, z);`
`  double betaD_D2 = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k2(x, y, z);`

   betaU(i)   = ig(i,j)*betaD(-j);
`  alpha[ijk] = 1./sqrt(1+fd_ks_c(x,y,z)*fd_ks_k0(x, y, z)*fd_ks_k0(x, y, z));`
`  psi[ijk]   = 1.;`

Cpopulate[beta = betaU];

`}`

`}`
