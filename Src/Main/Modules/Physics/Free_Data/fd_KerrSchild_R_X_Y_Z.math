### analytic Kerr-Schild free data :X,Y,Z,R and their derivatives
###
### note: X=X(x,y,z),Y=Y(x,y,z),Z=Z(x,y,z) and R=R(x,y,z)
###
### note: capital quantities or those with '_' prefix are 
###       in inertial frame (not in rotating frame

#########################
### H O W  T O  U S E ###
#########################
# Issue the following:
# 
# $ cpi fd_KerrSchild_R_X_Y_Z.math > fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i '/Welcome to Cpi/,$d' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E 's/Blank\((\w+)\)/\1/g' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E 's/\bXX\b\(/fd_ks_X\(/g' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E 's/\bYY\b\(/fd_ks_Y\(/g' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E 's/\bZZ\b\(/fd_ks_Z\(/g' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E 's/\bList\b//g' fd_KerrSchild_R_X_Y_Z.c && \
#   sed -i -E -f fd_KerrSchild_substitute_derives.sed fd_KerrSchild_R_X_Y_Z.c


Dimension = 3;
point     = x;
C_macro=name_(diff(name).doit());
C_macro2=print('KS_func_def_macro(name)KS_func_args_macro;');
C_macro3=print('KS_func_def_macro(name)KS_func_args_macro')\n\
	print('{')\n\
	print('return')\n\
	print(mcode(name));\n\
	print('}');

## libs
`from __future__ import division`
`from sympy import *`
`from sympy.tensor.tensor import TensorIndexType, TensorHead`
`from sympy.tensor.tensor import tensor_indices`
`from sympy.functions import transpose`
`from sympy.parsing.mathematica import mathematica`
`import sys`
`import re`
`import os`

### ccode generator
`def mcode(m,s=1):`
`  print('/* mcode in progress ... */')`
`  sys.stdout.flush()`
`  m = (m).doit()`
`  code = ""`
`  if (s==1):`
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%];\n"`
`    math_code += "c=CForm[%];\n"`
`    math_code += "Print[c]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`  elif (s==2):`
`    code = ccode(simplify(m))`
`  else:`
`    code = ccode(m)`
``
## return the code and break long lines
`  code = '{};'.format(code)`
`  code = re.sub(r'\b1.0\*\b','',code)`
`  code = re.sub(r'(.{50,70}[\+\-\*/]+\s?)','\\1{}n'.format("\\"),code)`
``
`  return code`
``

### simplify using mathematica or sympy or none:
`def msimplify(m,msg="...",s="mathematica"):`
`  print('/* msimplify({}) */'.format(msg))`
`  sys.stdout.flush()`
`  code = ""`
`  if (s=="mathematica"):`# if you want mathematica
`    pid = os.getpid()`
`    mfile_name=".mfile_temp_{}".format(pid)`
`    cfile_name=".cfile_temp_{}".format(pid)`
`    rhs  =""`
`    try:`
`      rhs  = mathematica_code((m).doit())`
`    except:`
`      rhs  = mathematica_code(m)`
``
`    math_code  = rhs + ";\n"`
`    math_code += "Simplify[%,TimeConstraint->1000];\n"`
`    math_code += "Print[%]"+"\n"`
## write into mathematica file
`    mfile = open(mfile_name,"w")`
`    mfile.write(math_code)`
`    mfile.close()`

## run mathematica and output into another
`    cmd = "math -run -noprompt < {} 1> {}".format(mfile_name,cfile_name)`
`    ret=os.system(cmd)`

## read math results.
`    cfile=open(cfile_name,"r")`
`    code =cfile.read()`
`    cfile.close()`

## delete the files
`    cmd = "rm -rf {} {}".format(mfile_name,cfile_name)`
`    os.system(cmd)`
`    return mathematica(code)`
`  elif(s=="sympy"):` ## if you wanna simpy simplify
`    code = simplify(m)`
`    return code`
`  else:` ## no simplification
`    return m`
``
``
``
`### symbols`
`x,y,z               = symbols('x,y,z')`
`r0,M_BH,a_BH,Lambda = symbols('r0,M_BH,a_BH,Lambda')`
`Bx,By,Bz,B2         = symbols('Bx,By,Bz,B2')`
`phiy,phiz           = symbols('phiy,phiz')`

## functions same as X,Y,Z but withoul explicit expansion to low file size
`XX = symbols('XX',cls=Function)`
`YY = symbols('YY',cls=Function)`
`ZZ = symbols('ZZ',cls=Function)`
``
``
`### radius function in Kerr-Schild coords:`
`def KS_radius(_x,_y,_z,a):`
`  r2 = (_x**2+_y**2+_z**2)`
`  a2 = a**2`
`  return (0.5*(r2-a2+((r2-a2)**2+4*a2*_z**2)**0.5))**0.5`
``
``
`### perform boost and rotation transformation, dir = [1,-1]`
`def Boost_Rotation(B,Ry,Rz,dir,v):`
`  if (dir == 1):`
`    return simplify(B*Rz*Ry)*v`
`  elif (dir == -1):`
`    return simplify(Ry**-1*Rz**-1)*(simplify(B**-1))*v`
`  else:`
`    raise Exception('Bad argument')`
``
``
`### populate boost transformation matrix:`
`def Boost_matrix(Bx,By,Bz,B2):`
`   gamma  = (1-B2)**(-0.5)`
`   b = Matrix([`
`     [gamma    , -gamma*Bx            , -gamma*By            , -gamma*Bz],`
`     [-gamma*Bx, 1+(gamma-1)*Bx**2/B2 , (gamma-1)*Bx*By/B2   , (gamma-1)*Bx*Bz/B2],`
`     [-gamma*By, (gamma-1)*Bx*By/B2   , 1+(gamma-1)*By**2/B2 , (gamma-1)*By*Bz/B2],`
`     [-gamma*Bz, (gamma-1)*Bx*Bz/B2   , (gamma-1)*By*Bz/B2   , 1+(gamma-1)*Bz**2/B2]`
`     ])`
`     `
`   return b;`
``
`### populate rotation transformaion matrix:`
`def Rotation_matrix(phiy,phiz):`
`  cy = cos(phiy)`
`  sy = sin(phiy)`
`  cz = cos(phiz)`
`  sz = sin(phiz)`
`  `
`  ty = Matrix([`
`     [1,0  ,0,0],`
`     [0,cy ,0,sy],`
`     [0,0  ,1,0],`
`     [0,-sy,0,cy]`
`     ])`
`     `
`  tz = Matrix([`
`     [1,0 ,0  ,0],`
`     [0,cz,-sz,0],`
`     [0,sz,cz ,0],`
`     [0,0 ,0  ,1]`
`     ])`
`     `
`  return ty, tz  `

`### evaluates:`

`x_mu     = transpose(Matrix([[0,x,y,z]]))`
`tB       = Boost_matrix(Bx,By,Bz,B2)`
`tRy, tRz = Rotation_matrix(phiy,phiz)`
`_x_mu = Boost_Rotation(tB,tRy,tRz,-1,x_mu)`
`X    = msimplify(_x_mu[1,0],"X")`
`Y    = msimplify(_x_mu[2,0],"Y")`
`Z    = msimplify(_x_mu[3,0],"Z")`
`a    = a_BH`
`R    = KS_radius(XX(x,y,z),YY(x,y,z),ZZ(x,y,z),a)`

``
`print('#include "fd_KerrSchild_header.h"')`
``
Declare =
{
#### diff

 # dX
 (obj = Field,name = dX, rank = D, C_macro);
 # dd X
 (obj = Field,name = ddX, rank = DD, C_macro);
 # ddd X
 (obj = Field,name = dddX, rank = DDD, C_macro);

 # d Y
 (obj = Field,name = dY, rank = D, C_macro);
 # dd Y
 (obj = Field,name = ddY, rank = DD, C_macro);
 # ddd Y
 (obj = Field,name = dddY, rank = DDD, C_macro);

 # d Z
 (obj = Field,name = dZ, rank = D, C_macro);
 # dd Z
 (obj = Field,name = ddZ, rank = DD, C_macro);
 # ddd Z
 (obj = Field,name = dddZ, rank = DDD, C_macro);

 # d R
 (obj = Field,name = dR, rank = D, C_macro);
 # dd R
 (obj = Field,name = ddR, rank = DD, C_macro);
 # ddd R
 (obj = Field,name = dddR, rank = DDD, C_macro);

#### c function declarations

 # X
 (obj = Field,name = X, rank = 0, C_macro2);
 # dX
 (obj = Field,name = dX, rank = D, C_macro2);
 # dd X
 (obj = Field,name = ddX, rank = DD, C_macro2);
 # ddd X
 (obj = Field,name = dddX, rank = DDD, C_macro2);

 # Y
 (obj = Field,name = Y, rank = 0, C_macro2);
 # d Y
 (obj = Field,name = dY, rank = D, C_macro2);
 # dd Y
 (obj = Field,name = ddY, rank = DD, C_macro2);
 # ddd Y
 (obj = Field,name = dddY, rank = DDD, C_macro2);

 # Z
 (obj = Field,name = Z, rank = 0, C_macro2);
 # d Z
 (obj = Field,name = dZ, rank = D, C_macro2);
 # dd Z
 (obj = Field,name = ddZ, rank = DD, C_macro2);
 # ddd Z
 (obj = Field,name = dddZ, rank = DDD, C_macro2);

 # R
 (obj = Field,name = R, rank = 0, C_macro2);
 # d R
 (obj = Field,name = dR, rank = D, C_macro2);
 # dd R
 (obj = Field,name = ddR, rank = DD, C_macro2);
 # ddd R
 (obj = Field,name = dddR, rank = DDD, C_macro2);


#### c function definition

 # X
 (obj = Field,name = X, rank = 0, C_macro3);
 # dX
 (obj = Field,name = dX, rank = D, C_macro3);
 # dd X
 (obj = Field,name = ddX, rank = DD, C_macro3);
 # ddd X
 (obj = Field,name = dddX, rank = DDD, C_macro3);

 # Y
 (obj = Field,name = Y, rank = 0, C_macro3);
 # d Y
 (obj = Field,name = dY, rank = D, C_macro3);
 # dd Y
 (obj = Field,name = ddY, rank = DD, C_macro3);
 # ddd Y
 (obj = Field,name = dddY, rank = DDD, C_macro3);

 # Z
 (obj = Field,name = Z, rank = 0, C_macro3);
 # d Z
 (obj = Field,name = dZ, rank = D, C_macro3);
 # dd Z
 (obj = Field,name = ddZ, rank = DD, C_macro3);
 # ddd Z
 (obj = Field,name = dddZ, rank = DDD, C_macro3);

 # R
 (obj = Field,name = R, rank = 0, C_macro3);
 # d R
 (obj = Field,name = dR, rank = D, C_macro3);
 # dd R
 (obj = Field,name = ddR, rank = DD, C_macro3);
 # ddd R
 (obj = Field,name = dddR, rank = DDD, C_macro3);

}

# symmetries:
Symm[ddX(i,j)    = ddX(j,i)];
Symm[dddX(i,j,k) = dddX(j,i,k)];

Symm[ddY(i,j)    = ddY(j,i)];
Symm[dddY(i,j,k) = dddY(j,i,k)];

Symm[ddZ(i,j)    = ddZ(j,i)];
Symm[dddZ(i,j,k) = dddZ(j,i,k)];

Symm[ddR(i,j)    = ddR(j,i)];
Symm[dddR(i,j,k) = dddR(j,i,k)];


### make it ready for python:
### remove C comments:
Command["sed -i 's/\/\* declaring: \*\///'"];

### remove spaces:
Command["sed -i 's/^  d/d/g'"];
Command["sed -i "s/^  print('KS_func/print('KS_func/g""];

### derivatives d/dx
Command["sed -i 's/0)\.doit/,x)\.doit/g'"];
### derivatives d/dy
Command["sed -i 's/1)\.doit/,y)\.doit/g'"];
### derivatives d/dz
Command["sed -i 's/2)\.doit/,z)\.doit/g'"];
### no doit
Command["sed -i 's/\.doit()//g'"];
### indices
Command["sed -i 's/D,/,/g'"];
Command["sed -i 's/diff(d/diff(/g'"];
Command["sed -i 's/_(diff/=(diff/g'"];
Command["sed -i 's/_,/,/g'"];

### functions:
Command["sed -i 's/double/double /g'"];
Command["sed -i 's/KS_func_args_macro/ KS_func_args_macro/g'"];

### remove C comments:
Command["sed -i '1,5d'"];
### run python
Comand["python "];
#Comand["cat "];

### rm redundants
Comand["rm "];
