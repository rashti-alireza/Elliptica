## computing extrinsic curvature K_{ij}, trK = ig^{ij}*K_{ij}
## for KerrSchild BH.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro1  = READ_v_STEM(name,ig);
C_macro2  = READ_v_STEM(name,Chris);
C_macro3  = REALLOC_v_WRITE_v_STEM(name,Kij);
C_macro4  = REALLOC_v_WRITE_v_STEM(name,trK);
C_macro5  = add_alloc_get(name);
C_macro6  = ADD_FIELD(name);


`#include "fd_header.h"`
`#include "fd_KerrSchild_header.h"`
``
``
`#define add_alloc_get(name) ADD_AND_ALLOC_FIELD(name);WRITE_v(name);`
``
``
`#define dfield_and_get_v(x) dField_di(x); READ_v(x);`
``
`#undef x`
`#undef y`
`#undef z`
``
`#define KS_func_pass_args_sed KS_func_pass_args_macro`
``
`#define KS_set_args \`
`  struct Analytic_Func_Arg_S farg[1];\`
`  farg->x = x;\`
`  farg->y = y;\`
`  farg->z = z;\`
`  farg->X = fd_ks_X KS_func_pass_args_macro;\`
`  farg->Y = fd_ks_Y KS_func_pass_args_macro;\`
`  farg->Z = fd_ks_Z KS_func_pass_args_macro;\`
`  farg->R = fd_ks_R KS_func_pass_args_macro;\`
`  farg->dX_D0 = fd_ks_dX_D0 KS_func_pass_args_sed;\`
`  farg->dX_D1 = fd_ks_dX_D1 KS_func_pass_args_sed;\`
`  farg->dX_D2 = fd_ks_dX_D2 KS_func_pass_args_sed;\`
`  farg->dY_D0 = fd_ks_dY_D0 KS_func_pass_args_sed;\`
`  farg->dY_D1 = fd_ks_dY_D1 KS_func_pass_args_sed;\`
`  farg->dY_D2 = fd_ks_dY_D2 KS_func_pass_args_sed;\`
`  farg->dZ_D0 = fd_ks_dZ_D0 KS_func_pass_args_sed;\`
`  farg->dZ_D1 = fd_ks_dZ_D1 KS_func_pass_args_sed;\`
`  farg->dZ_D2 = fd_ks_dZ_D2 KS_func_pass_args_sed;`
``
``

`void fd_Kij_trK_KerrSchild(Patch_T *const patch,`
` const double BH_center_x,const double BH_center_y,`
` const double BH_center_z,const char *const ig,`
` const char *const Chris,const char *const Kij,`
` const char *const trK);`
``
`void fd_Kij_trK_KerrSchild(Patch_T *const patch,`
` const double BH_center_x,const double BH_center_y,`
` const double BH_center_z,const char *const ig,`
` const char *const Chris,const char *const Kij,`
` const char *const trK)`
``
`{`

Declare =
{
  # ig
  (obj = Field,name = ig, rank = UU, C_macro1);

  # Chris
  (obj = Field,name = Chris, rank = UDD, C_macro2);

  # Kij
  (obj = Field,name = Kij, rank = DD, C_macro3);

  # trK
  (obj = Field,name = trKij, rank = 0, C_macro4);

  # beta
  (obj = Field,name = KS__beta, rank = D, C_macro5);

  # dbeta
  (obj = Field,name = dKS__beta, rank = DD, C_macro6);

  # alpha
  (obj = Field,name = KS__alpha, rank = 0, C_macro5);
	
}

Symm[ig(i,j)      = ig(j,i)];
Symm[Kij(i,j)     = Kij(j,i)];
Symm[Chris(i,j,k) = Chris(i,k,j)];

## populate beta_i and alpha

`FOR_ALL_ijk`
`{`
`  double x,y,z;`
`  x = patch->node[ijk]->x[0]-BH_center_x;`
`  y = patch->node[ijk]->x[1]-BH_center_y;`
`  z = patch->node[ijk]->x[2]-BH_center_z;`
`  KS_set_args`
``
`  KS__beta_D0[ijk] = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k0(x, y, z);`
`  KS__beta_D1[ijk] = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k1(x, y, z);`
`  KS__beta_D2[ijk] = fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_k2(x, y, z);`
`  KS__alpha[ijk]   = 1./sqrt(1+fd_ks_c(x,y,z)*fd_ks_kt(x, y, z)*fd_ks_kt(x, y, z));`

`}`

## take derivatives dbeta_i

`dfield_and_get_v(dKS__beta_D0D0);`
`dfield_and_get_v(dKS__beta_D0D1);`
`dfield_and_get_v(dKS__beta_D0D2);`
``
`dfield_and_get_v(dKS__beta_D1D0);`
`dfield_and_get_v(dKS__beta_D1D1);`
`dfield_and_get_v(dKS__beta_D1D2);`
``
`dfield_and_get_v(dKS__beta_D2D0);`
`dfield_and_get_v(dKS__beta_D2D1);`
`dfield_and_get_v(dKS__beta_D2D2);`
``
``
## covariant derivatives
`FOR_ALL_ijk`
`{`
     DB(-i,-j)       = dKS__beta(i,j)-Chris(l,i,j)*KS__beta(-l);
     ksKij(-i,-j)    = (DB(i,j)+DB(j,i))/(2*KS__alpha);
     Symm[ksKij(i,j) = ksKij(j,i)];
     trk             = ig(i,j)*ksKij(-i,-j);

     Cpopulate[Kij = ksKij];
     `trKij[ijk] = trk;`
`}`

`remove_field_with_regex(patch,"^KS__");`
`remove_field_with_regex(patch,"^dKS__");`

`}`
