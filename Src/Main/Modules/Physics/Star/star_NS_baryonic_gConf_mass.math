# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);

`#include "star_header.h"\n`
# return the baryonic mass of NS calculated by integrating
# rest mass density (measured by Eulerain observer) over NS volume
# for each given Euler equation constant.
`double star_NS_baryonic_gConf_mass(Physics_T *const phys,const double Euler_C)`
`{`
`  double NS_baryonic_mass = 0;`
`  unsigned p;`
``
`  FOR_ALL_PATCHES(p,phys->grid)`
`  {`
`    Patch_T *patch = phys->grid->patch[p];`

`    IF_not_cover(patch,phys) continue;`
``
`    ADD_AND_ALLOC_FIELD(baryonic_mass_integrand)`
`    DECLARE_FIELD(baryonic_mass_integrand)`

Declare = 
{
 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # spin part of fluid
 (obj = Field,name = W, rank = U, C_macro);

 # d(phi)/d? for irrotional part of fluid
 (obj = Field,name = dphi, rank = D, C_macro);

 # eta
 (obj = Field,name = eta, rank = 0, C_macro);

 # Beta
 (obj = Field,name = Beta, rank = U, C_macro);

 # Killing vector xi^i, assumed 0
 #(obj = Field,name = xi, rank = U, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # Euler equation constant
 (obj = variable,name = Euler_C, none);

 # rest mass density
 (obj = variable,name = rho0, none);
}
# symmetries:
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];

`    EoS_T *eos = initialize_EoS();`
# calculate the integrand:
`    unsigned nn = patch->nn;`
`    unsigned ijk;`
`    double rho0;`
Ccode["  for(ijk = 0; ijk < nn; ++ijk)"];
Ccode["  {"];
     alpha = eta/psi;
     psim4 = psi**(-4);
     psi4  = psi**(4);
     psi6  = psi**(6);
     P2    = psim4*igConf(i,j)*dphi(-i)*dphi(-j)+2*dphi(-i)*W(i)+psi4*gConf(-i,-j)*W(i)*W(j);
     uW    = dphi(-i)*W(i)+psi4*gConf(-i,-j)*W(i)*W(j);
     Bdphi = Beta(i)*dphi(-i);
     b     = (Bdphi-Euler_C)**2 + 2*(alpha**2)*uW;
     L2    = (b+(b**2-4*(alpha**4)*(uW**2))**(0.5))/(2*alpha**2);
     h2    = L2-P2;
     h     = (h2)**(0.5);
     u0    = (L2)**(0.5)/(h*alpha);
  ``
  `  if(!isfinite(h) || LSSEQL(h,1))`
  `  {`
  `    rho0 = 0;`
  `    u0   = 0;`
  `  }`
  `  else`
  `  {`
  `    eos->h = h;`
  `    rho0   = eos->rest_mass_density(eos);`
  `  }`
  ``
  `  baryonic_mass_integrand->v[ijk] = rho0*u0*alpha*psi6;`
Ccode["  }"];
Ccode["  free_EoS(eos);"];
`  Integration_T *I = init_integration();`
`  I->type = "Integral{f(x)dV},Spectral";`
`  I->Spectral->f = baryonic_mass_integrand;`
`  I->g00 = gConf_D0D0;`
`  I->g01 = gConf_D0D1;`
`  I->g02 = gConf_D0D2;`
`  I->g11 = gConf_D1D1;`
`  I->g12 = gConf_D1D2;`
`  I->g22 = gConf_D2D2;`
`  plan_integration(I);`
`  NS_baryonic_mass += execute_integration(I);`
`  free_integration(I);`
`  REMOVE_FIELD(baryonic_mass_integrand)`
`  }`#end of FOR_ALL_PATCHES

`  return NS_baryonic_mass;`
`}`
