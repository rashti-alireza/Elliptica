# calculating hamiltonian and momentum constraints from identities

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro1 = READ_v_UNUSED(name);
C_macro2 = REALLOC_v_WRITE_v_STEM(name,Ham);
C_macro3 = REALLOC_v_WRITE_v_STEM(name,Mom);
C_macro4 = dfield_and_get_v(name);
C_macro5 = add_dfield_and_get_v(name);

`#include "adm_header.h"`
``
``
``
`#define dfield_and_get_v(name) dField_di(name); READ_v_UNUSED(name);`
``
``
`#define add_dfield_and_get_v(name) ADD_FIELD(name); dField_di(name); READ_v_UNUSED(name);`
``
``
``
`extern fFunc_adm_update_AConfIJ_T (*adm_update_AConfIJ_patch);`
``
``
`void adm_ham_and_mom_from_identities(Patch_T *const patch,`
`        const char *const Ham,const char *const Mom);`
``
`void adm_ham_and_mom_from_identities(Patch_T *const patch,`
`        const char *const Ham,const char *const Mom)`
`{`
`  adm_update_AConfIJ_patch(patch);`
``
Declare = 
{
 # Hamiltonian constraint
 (obj = Field,name = ham, rank = 0, C_macro2);

 # Momentum constraints
 (obj = Field,name = mom, rank = U, C_macro3);

 # AConfIJ
 (obj = Field,name = AConfIJ, rank = UU, C_macro1);

 # partial derivative of AConfIJ
 (obj = Field,name = dAConfIJ, rank = UUD, C_macro1);

 # psi
 (obj = Field,name = psi, rank = 0, C_macro1);

 # conformal factor first derivative 
 (obj = Field,name = dpsi, rank = D, C_macro1);

 # conformal factor second derivative 
 (obj = Field,name = ddpsi, rank = DD, C_macro1);

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro1);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro1);

 # derivative of conformal metric inverse
 (obj = Field,name = digConf, rank = UUD, C_macro5);

 # conformal Christoffer symbol value
 (obj = Field,name = ChrisConf, rank = UDD, C_macro1);

 # EConf
 (obj = Field,name = EConf, rank = 0, C_macro1);

 # conformal momentum current
 (obj = Field,name = JConf, rank = U, C_macro1);

 # trKij
 (obj = Field,name = trK, rank = 0, C_macro1);

 # dtrKij
 (obj = Field,name = dtrK, rank = D, C_macro1);

 # Ricci
 (obj = Field,name = trRicciConf, rank = 0, C_macro1);

}
# symmetries:
Symm[AConfIJ(i,j)    = AConfIJ(j,i)];
Symm[dAConfIJ(i,j,l) = dAConfIJ(j,i,l)];
Symm[gConf(i,j)      = gConf(j,i)];
Symm[igConf(i,j)     = igConf(j,i)];
Symm[ChrisConf(i,j,k)= ChrisConf(i,k,j)];
Symm[ddpsi(i,j)      = ddpsi(j,i)];
Symm[digConf(i,j,k)  = digConf(j,i,k)];

`FOR_ALL_ijk`
`{`
## Calculate Hamiltonian and Momentum constraints:
#################################################################
psim4     = psi**(-4);
psim6     = psi**(-6);
J(i)      = psim6*JConf(i);
E         = psim6*EConf;
dLnpsi(-i)= dpsi(i)/psi;

DDpsi =  igConf(i,j)*ddpsi(-i,-j) \
       - igConf(-i,-j)*ChrisConf(l,i,j)*dpsi(-l);
R     = psim4*(trRicciConf-8*DDpsi/psi);

Kbar(i,j) = psim6*AConfIJ(i,j)+trK*igConf(i,j)/3;
Symm[Kbar(i,j) = Kbar(j,i)];

KijKij    = Kbar(i,j)*Kbar(l,m)*gConf(-i,-l)*gConf(-j,-m);

#### Hamiltonian:
Ham_Constraint =  R-KijKij+trK**2-16*pi*E;


c(i,j,k)  =\
2*(dLnpsi(k)*KD(i,j)+dLnpsi(j)*KD(i,k)-dLnpsi(-l)*igConf(i,l)*gConf(j,k));
Symm[c(i,j,k) = c(i,k,j)];

djKj(i)     = psim4*\
(psim6*(-10*dLnpsi(-j)*AConfIJ(i,j)+dAConfIJ(i,j,jp)*KD(-jp,-j))\
+dtrK(-j)*igConf(i,j)/3 - 4*trK*dLnpsi(-j)*igConf(i,j)/3 \
+trK*digConf(i,j,jp)*KD(-j,-jp)/3);

GammaKbar(i) = ChrisConf(i,j,l)*Kbar(-l,-j)+ChrisConf(j,jp,l)*Kbar(i,-l)*KD(-j,-jp);
DbarjKj(i)   = djKj(i)+GammaKbar(i)*psim4;

CKbar(i) = c(i,j,l)*Kbar(-l,-j)+c(j,jp,l)*Kbar(i,-l)*KD(-j,-jp);
Dk(i)    =  DbarjKj(i)+CKbar(i)*psim4;

#### Momentum:
Mom_constraint(i) = Dk(i)-psim4*igConf(i,j)*dtrK(-j)-8*pi*J(i);

### populate ###
Cpopulate[mom = Mom_constraint];
  `  ham[ijk] = Ham_Constraint;`

`}`

`remove_field_with_regex(patch,"^digConf_U.+");`
`}`
