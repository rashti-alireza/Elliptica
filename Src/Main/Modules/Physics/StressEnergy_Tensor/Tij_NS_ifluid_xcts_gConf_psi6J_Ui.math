# Note: Tij stands for Stress Energy tensor.
# IF stands for ideal fluid, XCTS for conformal thin sandwich method;
# thus, Tij_NS_IF_XCTS means stress enerfy of ideal fluid in XCTS method. 
# given all of the fields needed for J = -gamma(i,-mu)*T(mu,nu)*n(-nu) 
# it builds "momentum current * psi^6", where psi is conformal factor,
# and puts it to JConf_U?.
# note: it depends on u0, so first to call Tij_NS_IF_XCTS_gConf_u0 function. */

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
Ccode["#include "Tij_header.h"\n\n"];
Ccode["void Tij_NS_IF_XCTS_gConf_psi6J_Ui(Patch_T *const patch,EoS_T *const eos)"];
Ccode["{"];

Declare = 
{
 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro);

 # rho0
 (obj = Field,name = rho0, rank = 0, C_macro);

 # p/rho0
 (obj = Variable,name = p_o_rho0, rank = 0, None);

 # p
 (obj = Variable,name = p, rank = 0, None);

 # spin part of fluid
 (obj = Field,name = W, rank = U, C_macro);

 # d(phi)/d? for irrotional part of fluid
 (obj = Field,name = dphi, rank = D, C_macro);
 
 # alphaPsi
 (obj = Field,name = alphaPsi, rank = 0, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # u0
 (obj = Field,name = u0, rank = 0, C_macro);

 # conformal momentum current
 (obj = Field,name = JConf, rank = U, C_macro2);

 # JConfP
 (obj = Field,name = JConfP, rank = U, C_macro2);

 # JConfC
 (obj = Field,name = JConfC, rank = 0, C_macro2);
}

# symmetries:
Symm[igConf(i,j)  = igConf(j,i)];

## calculate JConf, JConfP, and JConfC. Note JConfC at outside is 1.


`FOR_ALL_ijk`
`{`
`  eos->h    = enthalpy[ijk];`
`  double p  = eos->pressure(eos);`
`  double e0 = eos->specific_internal_energy(eos);`

   alpha  = alphaPsi/psi;
   psim4  = psi**(-4);
   psi6   = psi**(6);
   j_u(i) = psi6*alpha*u0*rho0*(psim4*igConf(i,j)*dphi(-j)+W(i));
   Cpopulate[JConf = j_u];

## multiply by p/rho0 = h-1-e0 so avoid any 0 in the denominator
`  double p_o_rho0 = enthalpy[ijk] - 1. - e0;`

   jp_u(i) = psi6*alpha*u0*p*(psim4*igConf(i,j)*dphi(-j)+W(i));
   Cpopulate[JConfP = jp_u];

`  JConfC[ijk] = p_o_rho0;`

`}`

## set JConfP = JConf, and JConfC somewhere else is set 1.:

#`FOR_ALL_ijk`
#`{`
#   alpha  = alphaPsi/psi;
#   psim4  = psi**(-4);
#   psi6   = psi**(6);
#   j_u(i) = psi6*alpha*u0*rho0*(psim4*igConf(i,j)*dphi(-j)+W(i));
#   Cpopulate[JConf  = j_u];
#   Cpopulate[JConfP = j_u];
#`}`

Ccode["}"];
