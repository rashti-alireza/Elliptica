# Note: Tij stands for Stress Energy tensor.
# IF stands for ideal fluid, CTS for conformal thin sandwich method;
# thus, Tij_IF_CTS means stress enerfy of ideal fluid in CTS method. 
# given all of the fields needed it builds 
# the first component of fluid four velocity, i.e. 
# u_mu = (u_U0,u_U1,u_U2,u_U3).

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro  = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
Ccode["#include "Tij_header.h"\n\n"];
Ccode["void Tij_IF_CTS_u0(Patch_T *const patch)"];
Ccode["{"];
Ccode["  if (!IsItNSPatch(patch))"];
Ccode["    return;"];
Ccode["  const unsigned nn = patch->nn;"];
Ccode["  unsigned ijk;"];

Declare = 
{

 # conformal metric 
 (obj = Field,name = _gamma, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = _gammaI, rank = UU, C_macro);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro);

 # spin part of fluid
 (obj = Field,name = W, rank = U, C_macro);

 # d(phi)/d? for irrotional part of fluid
 (obj = Field,name = dphi, rank = D, C_macro);

 # eta
 (obj = Field,name = eta, rank = 0, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # u0
 (obj = Field,name = u0, rank = 0, C_macro2);

}

# symmetries:
Symm[_gammaI(i,j)  = _gammaI(j,i)];
Symm[_gamma(i,j)   = _gamma(j,i)];

# calculate u0:
Ccode["  for(ijk = 0; ijk < nn; ++ijk)"];
Ccode["  {"];
     alpha = eta/psi;
     psim4 = psi**(-4);
     psi4  = psi**(4);
     P2    = psim4*_gammaI(i,j)*dphi(-i)*dphi(-j)+2*dphi(-i)*W(i)+psi4*_gamma(-i,-j)*W(i)*W(j);
     u_mu0 = (enthalpy**2+P2)**(0.5)/(enthalpy*alpha);
     Ccode["  u0[ijk] = u_mu0;"];
Ccode["  }"];

Ccode["}"];
