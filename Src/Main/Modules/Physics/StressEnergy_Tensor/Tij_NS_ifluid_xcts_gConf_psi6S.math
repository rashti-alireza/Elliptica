# Note: Tij stands for Stress Energy tensor.
# IF stands for ideal fluid, XCTS for conformal thin sandwich method;
# thus, Tij_NS_IF_XCTS means stress enerfy of ideal fluid in XCTS method. 
# given all of the fields needed for 
# S = T(mu,nu)*gamma(i,j)*gamma(-i,-mu)*gamma(-j,-nu)
# it builds "total momentum density * psi^6", 
# where psi is conformal factor, and puts it to SConf. 
# note: it depends on u0, so first to call Tij_NS_IF_XCTS_gConf_u0 function.

# Manifold or grid Dimension
Dimension = 3;

# point on manifold shown by:
Point = ijk;

C_macro = READ_v(name);
C_macro2 = REALLOC_v_WRITE_v(name);
Ccode["#include "Tij_header.h"\n\n"];
Ccode["void Tij_NS_IF_XCTS_gConf_psi6S(Patch_T *const patch,EoS_T *const eos)"];
Ccode["{"];

Declare = 
{

 # conformal metric 
 (obj = Field,name = gConf, rank = DD, C_macro);

 # conformal metric inverse
 (obj = Field,name = igConf, rank = UU, C_macro);

 # enthalpy
 (obj = Field,name = enthalpy, rank = 0, C_macro);

 # spin part of fluid
 (obj = Field,name = W, rank = U, C_macro);

 # d(phi)/d? for irrotional part of fluid
 (obj = Field,name = dphi, rank = D, C_macro);

 # conformal factor
 (obj = Field,name = psi, rank = 0, C_macro);

 # rho0
 (obj = Field,name = rho0, rank = 0, C_macro);

 # p/rho0
 (obj = Variable,name = p_o_rho0, rank = 0, None);

 # pressure
 (obj = Variable,name = p, rank = 0, None);

 # SConf
 (obj = Field,name = SConf, rank = 0, C_macro2);

 # SConfP
 (obj = Field,name = SConfP, rank = 0, C_macro2);

 # SConfC
 (obj = Field,name = SConfC, rank = 0, C_macro2);
}

# symmetries:
Symm[igConf(i,j)  = igConf(j,i)];
Symm[gConf(i,j)   = gConf(j,i)];


## calculate SConf, SConfP, and SConfC. Note SConfC at outside is 1.

`FOR_ALL_ijk`
`{`
`  eos->h    = enthalpy[ijk];`
`  double p  = eos->pressure(eos);`
`  double e0 = eos->specific_internal_energy(eos);`

   psim4 = psi**(-4);
   psi4  = psi**(4);
   psi6  = psi**(6);
   P2    = psim4*igConf(i,j)*dphi(-i)*dphi(-j)+2*dphi(-i)*W(i)+psi4*gConf(-i,-j)*W(i)*W(j);
   Sbar = psi6*(rho0*P2/enthalpy+3*p);
`  SConf[ijk] = Sbar;`

## multiply by p/rho0 = h-1-e0 so avoid any 0 in the denominator
`  double p_o_rho0 = enthalpy[ijk] - 1. - e0;`

   SbarP = psi6*p*(P2/enthalpy+3*p_o_rho0);

`  SConfP[ijk] = SbarP;`
`  SConfC[ijk] = p_o_rho0;`

`}`


## set SConfP = SConf, and SConfC somewhere else is set 1.:

#`FOR_ALL_ijk`
#`{`
#`  eos->h    = enthalpy[ijk];`
#`  double p  = eos->pressure(eos);`
#     psim4 = psi**(-4);
#     psi4  = psi**(4);
#     psi6  = psi**(6);
#     P2    = psim4*igConf(i,j)*dphi(-i)*dphi(-j)+2*dphi(-i)*W(i)+psi4*gConf(-i,-j)*W(i)*W(j);
#     Sbar = psi6*(rho0*P2/enthalpy+3*p);
#`  SConfP[ijk] = SConf[ijk] = Sbar;`
#
#`}`

Ccode["}"];
